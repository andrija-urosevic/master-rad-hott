{-# OPTIONS --without-K --safe #-}

module Integer where

open import Natural public

‚Ñ§ : ùì§‚ÇÄ Ãá
‚Ñ§ = ‚Ñï + (ùüô + ‚Ñï)

pattern 0‚Ñ§  = inr (inl ‚ãÜ)
pattern +1‚Ñ§  = inr (inr 0)
pattern -1‚Ñ§ = inl 0

+‚Ñ§_ : ‚Ñï ‚Üí ‚Ñ§
+‚Ñ§ n = inr (inr n)

-‚Ñ§_ : ‚Ñï ‚Üí ‚Ñ§
-‚Ñ§ n = inl n

‚Ñ§-induction : (P : ‚Ñ§ ‚Üí ùì§ Ãá )
            ‚Üí P -1‚Ñ§
            ‚Üí ((n : ‚Ñï) ‚Üí P (-‚Ñ§ n) ‚Üí P (-‚Ñ§ (succ n)))
            ‚Üí P 0‚Ñ§
            ‚Üí P +1‚Ñ§
            ‚Üí ((n : ‚Ñï) ‚Üí P (+‚Ñ§ n) ‚Üí P (+‚Ñ§ (succ n)))
            ‚Üí (k : ‚Ñ§) ‚Üí P k
‚Ñ§-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ -1‚Ñ§                  = p-neg-1
‚Ñ§-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inl (succ x))       = p-neg-succ x (‚Ñ§-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inl x))
‚Ñ§-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ 0‚Ñ§                   = p-zero
‚Ñ§-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ +1‚Ñ§                  = p-pos-1
‚Ñ§-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inr (inr (succ x))) = p-pos-succ x (‚Ñ§-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inr (inr x))) 

succ‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§
succ‚Ñ§ -1‚Ñ§            = 0‚Ñ§
succ‚Ñ§ (inl (succ x)) = -‚Ñ§ x
succ‚Ñ§ 0‚Ñ§             = +1‚Ñ§
succ‚Ñ§ (inr (inr x))  = +‚Ñ§ (succ x)
 
pred‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§
pred‚Ñ§ (inl x)              = -‚Ñ§ (succ x)
pred‚Ñ§ 0‚Ñ§                   = -1‚Ñ§
pred‚Ñ§ +1‚Ñ§                  = 0‚Ñ§
pred‚Ñ§ (inr (inr (succ x))) = +‚Ñ§ x

infixl 21 _+‚Ñ§_
infixl 22 _*‚Ñ§_

_+‚Ñ§_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
-1‚Ñ§                +‚Ñ§ y = pred‚Ñ§ y
inl (succ x)       +‚Ñ§ y = pred‚Ñ§ (inl x +‚Ñ§ y) 
0‚Ñ§                 +‚Ñ§ y = y
+1‚Ñ§                +‚Ñ§ y = succ‚Ñ§ y 
inr (inr (succ x)) +‚Ñ§ y = succ‚Ñ§ (inr (inr x) +‚Ñ§ y)

add-‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
add-‚Ñ§ k l = l +‚Ñ§ k 

neg‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§
neg‚Ñ§ (inl x)       = +‚Ñ§ x
neg‚Ñ§ 0‚Ñ§            = 0‚Ñ§
neg‚Ñ§ (inr (inr x)) = -‚Ñ§ x

neg‚Ñ§-neg‚Ñ§-id : (k : ‚Ñ§) ‚Üí neg‚Ñ§ (neg‚Ñ§ k) == k 
neg‚Ñ§-neg‚Ñ§-id (inl x)       = refl (inl x)
neg‚Ñ§-neg‚Ñ§-id 0‚Ñ§            = refl 0‚Ñ§
neg‚Ñ§-neg‚Ñ§-id (inr (inr x)) = refl (inr (inr x))

neg-pred-succ-neg : (k : ‚Ñ§) ‚Üí neg‚Ñ§ (pred‚Ñ§ k) == succ‚Ñ§ (neg‚Ñ§ k)
neg-pred-succ-neg -1‚Ñ§                  = refl (inr (inr 1))
neg-pred-succ-neg (inl (succ x))       = refl (inr (inr (succ (succ x))))
neg-pred-succ-neg 0‚Ñ§                   = refl +1‚Ñ§
neg-pred-succ-neg +1‚Ñ§                  = refl 0‚Ñ§
neg-pred-succ-neg (inr (inr (succ x))) = refl (inl x)

neg-succ-pred-neg : (k : ‚Ñ§) ‚Üí neg‚Ñ§ (succ‚Ñ§ k) == pred‚Ñ§ (neg‚Ñ§ k)
neg-succ-pred-neg -1‚Ñ§                  = refl 0‚Ñ§
neg-succ-pred-neg (inl (succ x))       = refl (inr (inr x))
neg-succ-pred-neg 0‚Ñ§                   = refl (inl zero)
neg-succ-pred-neg +1‚Ñ§                  = refl (inl 1)
neg-succ-pred-neg (inr (inr (succ x))) = refl (inl (succ (succ x)))

_*‚Ñ§_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
-1‚Ñ§ *‚Ñ§ y                = neg‚Ñ§ y
inl (succ x) *‚Ñ§ y       = neg‚Ñ§ y +‚Ñ§ ((inl x) *‚Ñ§ y) 
0‚Ñ§ *‚Ñ§ y                 = 0‚Ñ§
+1‚Ñ§ *‚Ñ§ y                = y 
inr (inr (succ x)) *‚Ñ§ y = y +‚Ñ§ ((inr (inr x)) *‚Ñ§ y)

succ-pred-id : (k : ‚Ñ§) ‚Üí succ‚Ñ§ (pred‚Ñ§ k) == k
succ-pred-id -1‚Ñ§                  = refl -1‚Ñ§
succ-pred-id (inl (succ x))       = refl (inl (succ x))
succ-pred-id 0‚Ñ§                   = refl 0‚Ñ§
succ-pred-id +1‚Ñ§                  = refl +1‚Ñ§
succ-pred-id (inr (inr (succ x))) = refl (inr (inr (succ x)))

pred-succ-id : (k : ‚Ñ§) ‚Üí pred‚Ñ§ (succ‚Ñ§ k) == k 
pred-succ-id -1‚Ñ§                  = refl -1‚Ñ§
pred-succ-id (inl (succ x))       = refl (inl (succ x))
pred-succ-id 0‚Ñ§                   = refl 0‚Ñ§
pred-succ-id +1‚Ñ§                  = refl +1‚Ñ§ 
pred-succ-id (inr (inr (succ x))) = refl (inr (inr (succ x)))

left-unit-law-+‚Ñ§ : (k : ‚Ñ§) ‚Üí 0‚Ñ§ +‚Ñ§ k == k
left-unit-law-+‚Ñ§ -1‚Ñ§                  = refl -1‚Ñ§
left-unit-law-+‚Ñ§ (inl (succ x))       = refl (inl (succ x))
left-unit-law-+‚Ñ§ 0‚Ñ§                   = refl 0‚Ñ§ 
left-unit-law-+‚Ñ§ +1‚Ñ§                  = refl +1‚Ñ§ 
left-unit-law-+‚Ñ§ (inr (inr (succ x))) = refl (inr (inr (succ x)))

right-unit-law-+‚Ñ§ : (k : ‚Ñ§) ‚Üí k +‚Ñ§ 0‚Ñ§ == k 
right-unit-law-+‚Ñ§ -1‚Ñ§                  = refl -1‚Ñ§
right-unit-law-+‚Ñ§ (inl (succ x))       = (pred‚Ñ§ (inl x +‚Ñ§ 0‚Ñ§)) ==‚ü® ap pred‚Ñ§ (right-unit-law-+‚Ñ§ (inl x)) ‚ü© 
                                         ((inl (succ x))       ‚àé)
right-unit-law-+‚Ñ§ 0‚Ñ§                   = refl 0‚Ñ§
right-unit-law-+‚Ñ§ +1‚Ñ§                  = refl +1‚Ñ§ 
right-unit-law-+‚Ñ§ (inr (inr (succ x))) = (succ‚Ñ§ (inr (inr x) +‚Ñ§ 0‚Ñ§)) ==‚ü® ap succ‚Ñ§ (right-unit-law-+‚Ñ§ (inr (inr x))) ‚ü© 
                                         ((inr (inr (succ x)))       ‚àé)

left-pred-law-+‚Ñ§ : (k l : ‚Ñ§) ‚Üí pred‚Ñ§ k +‚Ñ§ l == pred‚Ñ§ (k +‚Ñ§ l)
left-pred-law-+‚Ñ§ -1‚Ñ§                  l = refl (pred‚Ñ§ (pred‚Ñ§ l))
left-pred-law-+‚Ñ§ (inl (succ x))       l = refl (pred‚Ñ§ (pred‚Ñ§ (inl x +‚Ñ§ l)))
left-pred-law-+‚Ñ§ 0‚Ñ§                   l = refl (pred‚Ñ§ l)
left-pred-law-+‚Ñ§ +1‚Ñ§                  l = pred-succ-id l ‚Åª¬π
left-pred-law-+‚Ñ§ (inr (inr (succ x))) l = pred-succ-id (inr (inr x) +‚Ñ§ l) ‚Åª¬π

right-pred-law-+‚Ñ§ : (k l : ‚Ñ§) ‚Üí k +‚Ñ§ pred‚Ñ§ l == pred‚Ñ§ (k +‚Ñ§ l)
right-pred-law-+‚Ñ§ -1‚Ñ§                  l = refl (pred‚Ñ§ (pred‚Ñ§ l))
right-pred-law-+‚Ñ§ (inl (succ x))       l = (pred‚Ñ§ (inl x +‚Ñ§ pred‚Ñ§ l))    ==‚ü® ap pred‚Ñ§ (right-pred-law-+‚Ñ§ (inl x) l) ‚ü© 
                                           ((pred‚Ñ§ (pred‚Ñ§ (inl x +‚Ñ§ l))) ‚àé)
right-pred-law-+‚Ñ§ 0‚Ñ§                   l = refl (pred‚Ñ§ l)
right-pred-law-+‚Ñ§ +1‚Ñ§                  l = (succ‚Ñ§ (pred‚Ñ§ l)) ==‚ü® succ-pred-id l ‚ü© 
                                           (l                ==‚ü® pred-succ-id l ‚Åª¬π ‚ü© 
                                           ((pred‚Ñ§ (succ‚Ñ§ l)) ‚àé)) 
right-pred-law-+‚Ñ§ (inr (inr (succ x))) l = (succ‚Ñ§ (inr (inr x) +‚Ñ§ pred‚Ñ§ l))    ==‚ü® ap succ‚Ñ§ (right-pred-law-+‚Ñ§ (inr (inr x)) l) ‚ü© 
                                           (succ‚Ñ§ (pred‚Ñ§ (inr (inr x) +‚Ñ§ l))   ==‚ü® succ-pred-id (inr (inr x) +‚Ñ§ l) ‚ü© 
                                           ((inr (inr x) +‚Ñ§ l)                 ==‚ü® pred-succ-id (inr (inr x) +‚Ñ§ l) ‚Åª¬π ‚ü© 
                                           ((pred‚Ñ§ (succ‚Ñ§ (inr (inr x) +‚Ñ§ l))) ‚àé)))

left-succ-law-+‚Ñ§ : (k l : ‚Ñ§) ‚Üí succ‚Ñ§ k +‚Ñ§ l == succ‚Ñ§ (k +‚Ñ§ l)
left-succ-law-+‚Ñ§ -1‚Ñ§                  l = succ-pred-id l ‚Åª¬π
left-succ-law-+‚Ñ§ (inl (succ x))       l = succ-pred-id (inl x +‚Ñ§ l) ‚Åª¬π
left-succ-law-+‚Ñ§ 0‚Ñ§                   l = refl (succ‚Ñ§ l)
left-succ-law-+‚Ñ§ +1‚Ñ§                  l = refl (succ‚Ñ§ (succ‚Ñ§ l))
left-succ-law-+‚Ñ§ (inr (inr (succ x))) l = refl (succ‚Ñ§ (succ‚Ñ§ (inr (inr x) +‚Ñ§ l)))

right-succ-law-+‚Ñ§ : (k l : ‚Ñ§) ‚Üí k +‚Ñ§ succ‚Ñ§ l == succ‚Ñ§ (k +‚Ñ§ l)
right-succ-law-+‚Ñ§ -1‚Ñ§                   l = pred‚Ñ§ (succ‚Ñ§ l)    ==‚ü® pred-succ-id l ‚ü© 
                                            (l                 ==‚ü® succ-pred-id l ‚Åª¬π ‚ü© 
                                            ((succ‚Ñ§ (pred‚Ñ§ l)) ‚àé))
right-succ-law-+‚Ñ§ (inl (succ x))       l = (pred‚Ñ§ (inl x +‚Ñ§ succ‚Ñ§ l))    ==‚ü® ap pred‚Ñ§ (right-succ-law-+‚Ñ§ (inl x) l) ‚ü© 
                                           ((pred‚Ñ§ (succ‚Ñ§ (inl x +‚Ñ§ l))) ==‚ü® pred-succ-id (inl x +‚Ñ§ l) ‚ü© 
                                           ((inl x +‚Ñ§ l)                 ==‚ü® succ-pred-id (inl x +‚Ñ§ l) ‚Åª¬π ‚ü© 
                                           ((succ‚Ñ§ (pred‚Ñ§ (inl x +‚Ñ§ l))) ‚àé)))
right-succ-law-+‚Ñ§ 0‚Ñ§                   l = refl (succ‚Ñ§ l)
right-succ-law-+‚Ñ§ +1‚Ñ§                  l = refl (succ‚Ñ§ (succ‚Ñ§ l))
right-succ-law-+‚Ñ§ (inr (inr (succ x))) l = (succ‚Ñ§ (inr (inr x) +‚Ñ§ succ‚Ñ§ l))    ==‚ü® (ap succ‚Ñ§ (right-succ-law-+‚Ñ§ (inr (inr x)) l)) ‚ü© 
                                           ((succ‚Ñ§ (succ‚Ñ§ (inr (inr x) +‚Ñ§ l))) ‚àé)

associative-+‚Ñ§ : (k l p : ‚Ñ§) ‚Üí (k +‚Ñ§ l) +‚Ñ§ p == k +‚Ñ§ (l +‚Ñ§ p)
associative-+‚Ñ§ -1‚Ñ§                  l p = left-pred-law-+‚Ñ§ l p
associative-+‚Ñ§ (inl (succ x))       l p = (pred‚Ñ§ (inl x +‚Ñ§ l) +‚Ñ§ p)    ==‚ü® (left-pred-law-+‚Ñ§ (inl x +‚Ñ§ l) p) ‚ü© 
                                          (pred‚Ñ§ ((inl x +‚Ñ§ l) +‚Ñ§ p)   ==‚ü® ap pred‚Ñ§ (associative-+‚Ñ§ (inl x) l p) ‚ü© 
                                          ((pred‚Ñ§ (inl x +‚Ñ§ (l +‚Ñ§ p))) ==‚ü® (left-pred-law-+‚Ñ§ (inl x) (l +‚Ñ§ p)) ‚Åª¬π ‚ü© 
                                          ((pred‚Ñ§ (inl x +‚Ñ§ (l +‚Ñ§ p))) ‚àé)))
associative-+‚Ñ§ 0‚Ñ§                   l p = refl (l +‚Ñ§ p)
associative-+‚Ñ§ +1‚Ñ§                  l p = left-succ-law-+‚Ñ§ l p 
associative-+‚Ñ§ (inr (inr (succ x))) l p = (succ‚Ñ§ (inr (inr x) +‚Ñ§ l) +‚Ñ§ p)    ==‚ü® (left-succ-law-+‚Ñ§ (inr (inr x) +‚Ñ§ l) p) ‚ü© 
                                          ((succ‚Ñ§ ((inr (inr x) +‚Ñ§ l) +‚Ñ§ p)) ==‚ü® ap succ‚Ñ§ (associative-+‚Ñ§ (inr (inr x)) l p) ‚ü© 
                                          ((succ‚Ñ§ (inr (inr x) +‚Ñ§ (l +‚Ñ§ p))) ==‚ü® (left-succ-law-+‚Ñ§ (inr (inr x)) (l +‚Ñ§ p)) ‚Åª¬π ‚ü© 
                                          ((succ‚Ñ§ (inr (inr x) +‚Ñ§ (l +‚Ñ§ p))) ‚àé)))

commutative-+‚Ñ§ : (k l : ‚Ñ§) ‚Üí k +‚Ñ§ l == l +‚Ñ§ k 
commutative-+‚Ñ§ -1‚Ñ§                  l = (pred‚Ñ§ l)        ==‚ü® left-pred-law-+‚Ñ§ 0‚Ñ§ l ‚ü© 
                                        (pred‚Ñ§ (0‚Ñ§ +‚Ñ§ l) ==‚ü® ap pred‚Ñ§ (commutative-+‚Ñ§ 0‚Ñ§ l) ‚ü© 
                                        (pred‚Ñ§ (l +‚Ñ§ 0‚Ñ§) ==‚ü® (right-pred-law-+‚Ñ§ l 0‚Ñ§) ‚Åª¬π ‚ü© 
                                        ((l +‚Ñ§ inl zero) ‚àé)))
commutative-+‚Ñ§ (inl (succ x))       l = (pred‚Ñ§ (inl x +‚Ñ§ l))  ==‚ü® ap pred‚Ñ§ (commutative-+‚Ñ§ (inl x) l) ‚ü© 
                                        ((pred‚Ñ§ (l +‚Ñ§ inl x)) ==‚ü® (right-pred-law-+‚Ñ§ l (inl x)) ‚Åª¬π ‚ü© 
                                        ((l +‚Ñ§ inl (succ x))  ‚àé))
commutative-+‚Ñ§ 0‚Ñ§                   l = l          ==‚ü® (right-unit-law-+‚Ñ§ l) ‚Åª¬π ‚ü© 
                                        ((l +‚Ñ§ 0‚Ñ§) ‚àé)
commutative-+‚Ñ§ +1‚Ñ§                  l = (0‚Ñ§ +‚Ñ§ succ‚Ñ§ l)        ==‚ü® left-succ-law-+‚Ñ§ 0‚Ñ§ l ‚ü©
                                        (succ‚Ñ§ (0‚Ñ§ +‚Ñ§ l)       ==‚ü® ap succ‚Ñ§ (commutative-+‚Ñ§ 0‚Ñ§ l) ‚ü©
                                        (succ‚Ñ§ (l +‚Ñ§ 0‚Ñ§)       ==‚ü® right-succ-law-+‚Ñ§ l 0‚Ñ§ ‚Åª¬π ‚ü© 
                                        ((l +‚Ñ§ inr (inr zero)) ‚àé)))
commutative-+‚Ñ§ (inr (inr (succ x))) l = (succ‚Ñ§ (inr (inr x) +‚Ñ§ l))  ==‚ü® ap succ‚Ñ§ (commutative-+‚Ñ§ (inr (inr x)) l) ‚ü© 
                                        ((succ‚Ñ§ (l +‚Ñ§ inr (inr x))) ==‚ü® right-succ-law-+‚Ñ§ l (inr (inr x)) ‚Åª¬π ‚ü© 
                                        ((l +‚Ñ§ inr (inr (succ x)))  ‚àé))

left-inverse-law-+‚Ñ§ : (k : ‚Ñ§) ‚Üí neg‚Ñ§ k +‚Ñ§ k == 0‚Ñ§
left-inverse-law-+‚Ñ§ -1‚Ñ§                  = refl 0‚Ñ§
left-inverse-law-+‚Ñ§ (inl (succ x))       = (succ‚Ñ§ (inr (inr x) +‚Ñ§ inl (succ x)))   ==‚ü® ap succ‚Ñ§ (right-pred-law-+‚Ñ§ (inr (inr x)) (inl x)) ‚ü© 
                                           ((succ‚Ñ§ (pred‚Ñ§ (inr (inr x) +‚Ñ§ inl x))) ==‚ü® succ-pred-id (inr (inr x) +‚Ñ§ inl x) ‚ü© 
                                           ((inr (inr x) +‚Ñ§ inl x)                 ==‚ü® left-inverse-law-+‚Ñ§ (inl x) ‚ü© 
                                           (0‚Ñ§                                     ‚àé)))
left-inverse-law-+‚Ñ§ 0‚Ñ§                   = refl 0‚Ñ§
left-inverse-law-+‚Ñ§ +1‚Ñ§                  = refl 0‚Ñ§
left-inverse-law-+‚Ñ§ (inr (inr (succ x))) = (pred‚Ñ§ (inl x +‚Ñ§ inr (inr (succ x))))   ==‚ü® ap pred‚Ñ§ (right-succ-law-+‚Ñ§ (inl x) (inr (inr x))) ‚ü© 
                                           ((pred‚Ñ§ (succ‚Ñ§ (inl x +‚Ñ§ inr (inr x)))) ==‚ü® pred-succ-id (inl x +‚Ñ§ inr (inr x)) ‚ü© 
                                           ((inl x +‚Ñ§ inr (inr x))                 ==‚ü® (left-inverse-law-+‚Ñ§ (inr (inr x))) ‚ü© 
                                           (0‚Ñ§                                     ‚àé))) 
  
right-inverse-law-+‚Ñ§ : (k : ‚Ñ§) ‚Üí k +‚Ñ§ neg‚Ñ§ k == 0‚Ñ§
right-inverse-law-+‚Ñ§ k = (k +‚Ñ§ neg‚Ñ§ k)  ==‚ü® (commutative-+‚Ñ§ k (neg‚Ñ§ k)) ‚ü© 
                         ((neg‚Ñ§ k +‚Ñ§ k) ==‚ü® (left-inverse-law-+‚Ñ§ k) ‚ü© 
                         (0‚Ñ§            ‚àé))

left-zero-law-*‚Ñ§ : (k : ‚Ñ§) ‚Üí 0‚Ñ§ *‚Ñ§ k == 0‚Ñ§
left-zero-law-*‚Ñ§ k = refl 0‚Ñ§

right-zero-law-*‚Ñ§ : (k : ‚Ñ§) ‚Üí k *‚Ñ§ 0‚Ñ§ == 0‚Ñ§
right-zero-law-*‚Ñ§ -1‚Ñ§                  = refl 0‚Ñ§
right-zero-law-*‚Ñ§ (inl (succ x))       = right-zero-law-*‚Ñ§ (inl x) 
right-zero-law-*‚Ñ§ 0‚Ñ§                   = refl 0‚Ñ§ 
right-zero-law-*‚Ñ§ +1‚Ñ§                  = refl 0‚Ñ§ 
right-zero-law-*‚Ñ§ (inr (inr (succ x))) = right-zero-law-*‚Ñ§ (inr (inr x))

left-unit-law-*‚Ñ§ : (k : ‚Ñ§) ‚Üí +1‚Ñ§ *‚Ñ§ k == k 
left-unit-law-*‚Ñ§ k = refl k

right-unit-law-*‚Ñ§ : (k : ‚Ñ§) ‚Üí k *‚Ñ§ +1‚Ñ§ == k 
right-unit-law-*‚Ñ§ -1‚Ñ§                  = refl -1‚Ñ§
right-unit-law-*‚Ñ§ (inl (succ x))       = (pred‚Ñ§ (inl x *‚Ñ§ +1‚Ñ§)) ==‚ü® ap pred‚Ñ§ (right-unit-law-*‚Ñ§ (inl x)) ‚ü© 
                                         ((inl (succ x))        ‚àé)
right-unit-law-*‚Ñ§ 0‚Ñ§                   = refl 0‚Ñ§
right-unit-law-*‚Ñ§ +1‚Ñ§                  = refl +1‚Ñ§ 
right-unit-law-*‚Ñ§ (inr (inr (succ x))) = succ‚Ñ§ (inr (inr x) *‚Ñ§ +1‚Ñ§) ==‚ü® ap succ‚Ñ§ (right-unit-law-*‚Ñ§ (inr (inr x))) ‚ü© 
                                         ((inr (inr (succ x)))      ‚àé)

left-pred-law-*‚Ñ§ : (k l : ‚Ñ§) ‚Üí pred‚Ñ§ k *‚Ñ§ l == k *‚Ñ§ l +‚Ñ§ (neg‚Ñ§ l)
left-pred-law-*‚Ñ§ -1‚Ñ§                  l = refl (neg‚Ñ§ l +‚Ñ§ neg‚Ñ§ l)
left-pred-law-*‚Ñ§ (inl (succ x))       l = (neg‚Ñ§ l +‚Ñ§ (neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l))  ==‚ü® ap (Œª y ‚Üí neg‚Ñ§ l +‚Ñ§ y) (commutative-+‚Ñ§ (neg‚Ñ§ l) (inl x *‚Ñ§ l)) ‚ü© 
                                          ((neg‚Ñ§ l +‚Ñ§ (inl x *‚Ñ§ l +‚Ñ§ neg‚Ñ§ l)) ==‚ü® associative-+‚Ñ§ (neg‚Ñ§ l) (inl x *‚Ñ§ l) (neg‚Ñ§ l) ‚Åª¬π ‚ü© 
                                          ((neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l +‚Ñ§ neg‚Ñ§ l)   ‚àé))
left-pred-law-*‚Ñ§ 0‚Ñ§                   l = refl (neg‚Ñ§ l)
left-pred-law-*‚Ñ§ +1‚Ñ§                  l = right-inverse-law-+‚Ñ§ l ‚Åª¬π 
left-pred-law-*‚Ñ§ (inr (inr (succ x))) l = ((l +‚Ñ§ inr (inr x) *‚Ñ§ l +‚Ñ§ neg‚Ñ§ l)   ==‚ü® commutative-+‚Ñ§ (l +‚Ñ§ inr (inr x) *‚Ñ§ l) (neg‚Ñ§ l) ‚ü© 
                                          ((neg‚Ñ§ l +‚Ñ§ (l +‚Ñ§ inr (inr x) *‚Ñ§ l)) ==‚ü® (associative-+‚Ñ§ (neg‚Ñ§ l) l (inr (inr x) *‚Ñ§ l)) ‚Åª¬π ‚ü© 
                                          ((neg‚Ñ§ l +‚Ñ§ l +‚Ñ§ inr (inr x) *‚Ñ§ l)   ==‚ü® ap (Œª y ‚Üí y +‚Ñ§ inr (inr x) *‚Ñ§ l) (left-inverse-law-+‚Ñ§ l) ‚ü© 
                                          ((inr (inr x) *‚Ñ§ l)                  ‚àé)))) ‚Åª¬π

left-succ-law-*‚Ñ§ : (k l : ‚Ñ§) ‚Üí (succ‚Ñ§ k) *‚Ñ§ l == k *‚Ñ§ l +‚Ñ§ l
left-succ-law-*‚Ñ§ -1‚Ñ§                  l = left-inverse-law-+‚Ñ§ l ‚Åª¬π
left-succ-law-*‚Ñ§ (inl (succ x))       l = ((neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l +‚Ñ§ l)   ==‚ü® commutative-+‚Ñ§ (neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l) l ‚ü© 
                                          ((l +‚Ñ§ (neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l)) ==‚ü® associative-+‚Ñ§ l (neg‚Ñ§ l) (inl x *‚Ñ§ l) ‚Åª¬π ‚ü© 
                                          (((l +‚Ñ§ neg‚Ñ§ l) +‚Ñ§ inl x *‚Ñ§ l) ==‚ü® ap (Œª y ‚Üí y +‚Ñ§ inl x *‚Ñ§ l) (right-inverse-law-+‚Ñ§ l) ‚ü© 
                                          ((inl x *‚Ñ§ l)                  ‚àé)))) ‚Åª¬π
left-succ-law-*‚Ñ§ 0‚Ñ§                   l = refl l 
left-succ-law-*‚Ñ§ +1‚Ñ§                  l = refl (l +‚Ñ§ l) 
left-succ-law-*‚Ñ§ (inr (inr (succ x))) l = (l +‚Ñ§ (l +‚Ñ§ inr (inr x) *‚Ñ§ l))  ==‚ü® ap (Œª y ‚Üí l +‚Ñ§ y) (commutative-+‚Ñ§ l (inr (inr x) *‚Ñ§ l)) ‚ü© 
                                          ((l +‚Ñ§ (inr (inr x) *‚Ñ§ l +‚Ñ§ l)) ==‚ü® associative-+‚Ñ§ l (inr (inr x) *‚Ñ§ l) l ‚Åª¬π ‚ü© 
                                          ((l +‚Ñ§ inr (inr x) *‚Ñ§ l +‚Ñ§ l)   ‚àé))

neg-+-neg-+-neg : (k l : ‚Ñ§) ‚Üí neg‚Ñ§ (k +‚Ñ§ l) == neg‚Ñ§ k +‚Ñ§ neg‚Ñ§ l 
neg-+-neg-+-neg -1‚Ñ§                  l = neg-pred-succ-neg l
neg-+-neg-+-neg (inl (succ x))       l = neg‚Ñ§ (pred‚Ñ§ (inl x +‚Ñ§ l))       ==‚ü® neg-pred-succ-neg (inl x +‚Ñ§ l) ‚ü© 
                                        ((succ‚Ñ§ (neg‚Ñ§ (inl x +‚Ñ§ l)))     ==‚ü® ap succ‚Ñ§ (neg-+-neg-+-neg (inl x) l) ‚ü© 
                                        ((succ‚Ñ§ (inr (inr x) +‚Ñ§ neg‚Ñ§ l)) ‚àé))
neg-+-neg-+-neg 0‚Ñ§                   l = refl (neg‚Ñ§ l)
neg-+-neg-+-neg +1‚Ñ§                  l = neg-succ-pred-neg l
neg-+-neg-+-neg (inr (inr (succ x))) l = (neg‚Ñ§ (succ‚Ñ§ (inr (inr x) +‚Ñ§ l)))  ==‚ü® neg-succ-pred-neg (inr (inr x) +‚Ñ§ l) ‚ü© 
                                         ((pred‚Ñ§ (neg‚Ñ§ (inr (inr x) +‚Ñ§ l))) ==‚ü® ap pred‚Ñ§ (neg-+-neg-+-neg (inr (inr x)) l) ‚ü© 
                                         ((pred‚Ñ§ (inl x +‚Ñ§ neg‚Ñ§ l))         ‚àé))

left-neg-law-‚Ñ§ : (k l : ‚Ñ§) ‚Üí neg‚Ñ§ (k *‚Ñ§ l) == neg‚Ñ§ k *‚Ñ§ l
left-neg-law-‚Ñ§ -1‚Ñ§                  l = neg‚Ñ§-neg‚Ñ§-id l
left-neg-law-‚Ñ§ (inl (succ x))       l = ((neg‚Ñ§ (neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l))        ==‚ü® neg-+-neg-+-neg (neg‚Ñ§ l) (inl x *‚Ñ§ l) ‚ü© 
                                        ((neg‚Ñ§ (neg‚Ñ§ l) +‚Ñ§ neg‚Ñ§ (inl x *‚Ñ§ l)) ==‚ü® ap (Œª y ‚Üí y +‚Ñ§ neg‚Ñ§ (inl x *‚Ñ§ l)) (neg‚Ñ§-neg‚Ñ§-id l) ‚ü© 
                                        ((l +‚Ñ§ neg‚Ñ§ (inl x *‚Ñ§ l))             ==‚ü® ap (Œª y ‚Üí l +‚Ñ§ y) (left-neg-law-‚Ñ§ (inl x) l ) ‚ü© 
                                        ((l +‚Ñ§ inr (inr x) *‚Ñ§ l)              ‚àé))))
left-neg-law-‚Ñ§ 0‚Ñ§                   l = refl 0‚Ñ§
left-neg-law-‚Ñ§ +1‚Ñ§                  l = refl (neg‚Ñ§ l)
left-neg-law-‚Ñ§ (inr (inr (succ x))) l = ((neg‚Ñ§ (l +‚Ñ§ inr (inr x) *‚Ñ§ l))      ==‚ü® neg-+-neg-+-neg l (inr (inr x) *‚Ñ§ l) ‚ü© 
                                        ((neg‚Ñ§ l +‚Ñ§ neg‚Ñ§ (inr (inr x) *‚Ñ§ l)) ==‚ü® ap (Œª y ‚Üí neg‚Ñ§ l +‚Ñ§ y) (left-neg-law-‚Ñ§ (inr (inr x)) l) ‚ü© 
                                        ((neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l)              ‚àé)))

right-neg-law-‚Ñ§ : (k l : ‚Ñ§) ‚Üí neg‚Ñ§ (k *‚Ñ§ l) == k *‚Ñ§ neg‚Ñ§ l 
right-neg-law-‚Ñ§ -1‚Ñ§                  l = refl (neg‚Ñ§ (neg‚Ñ§ l))
right-neg-law-‚Ñ§ (inl (succ x))       l = (neg‚Ñ§ (neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l))         ==‚ü® neg-+-neg-+-neg (neg‚Ñ§ l) (inl x *‚Ñ§ l) ‚ü© 
                                         ((neg‚Ñ§ (neg‚Ñ§ l) +‚Ñ§ neg‚Ñ§ (inl x *‚Ñ§ l)) ==‚ü® ap (Œª y ‚Üí neg‚Ñ§ (neg‚Ñ§ l) +‚Ñ§ y) (right-neg-law-‚Ñ§ (inl x) l) ‚ü© 
                                         ((neg‚Ñ§ (neg‚Ñ§ l) +‚Ñ§ inl x *‚Ñ§ neg‚Ñ§ l)   ‚àé))
right-neg-law-‚Ñ§ 0‚Ñ§                   l = refl 0‚Ñ§
right-neg-law-‚Ñ§ +1‚Ñ§                  l = refl (neg‚Ñ§ l)
right-neg-law-‚Ñ§ (inr (inr (succ x))) l = (neg‚Ñ§ (l +‚Ñ§ inr (inr x) *‚Ñ§ l))       ==‚ü® neg-+-neg-+-neg l (inr (inr x) *‚Ñ§ l) ‚ü© 
                                         ((neg‚Ñ§ l +‚Ñ§ neg‚Ñ§ (inr (inr x) *‚Ñ§ l)) ==‚ü® ap (Œª y ‚Üí neg‚Ñ§ l +‚Ñ§ y) (right-neg-law-‚Ñ§ (inr (inr x)) l) ‚ü© 
                                         ((neg‚Ñ§ l +‚Ñ§ inr (inr x) *‚Ñ§ neg‚Ñ§ l)   ‚àé))

left-distirbutive-‚Ñ§ : (k l p : ‚Ñ§) ‚Üí k *‚Ñ§ (l +‚Ñ§ p) == k *‚Ñ§ l +‚Ñ§ k *‚Ñ§ p 
left-distirbutive-‚Ñ§ -1‚Ñ§                  l p = neg-+-neg-+-neg l p
left-distirbutive-‚Ñ§ (inl (succ x))       l p = (neg‚Ñ§ (l +‚Ñ§ p) +‚Ñ§ inl x *‚Ñ§ (l +‚Ñ§ p))              ==‚ü® ap (Œª y ‚Üí y +‚Ñ§ inl x *‚Ñ§ (l +‚Ñ§ p)) (neg-+-neg-+-neg l p) ‚ü© 
                                               ((neg‚Ñ§ l +‚Ñ§ neg‚Ñ§ p +‚Ñ§ inl x *‚Ñ§ (l +‚Ñ§ p))          ==‚ü® ap (Œª y ‚Üí neg‚Ñ§ l +‚Ñ§ neg‚Ñ§ p +‚Ñ§ y) (left-distirbutive-‚Ñ§ (inl x) l p) ‚ü© 
                                               ((neg‚Ñ§ l +‚Ñ§ neg‚Ñ§ p +‚Ñ§ (inl x *‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ p)) ==‚ü® (associative-+‚Ñ§ (neg‚Ñ§ l +‚Ñ§ neg‚Ñ§ p) (inl x *‚Ñ§ l) (inl x *‚Ñ§ p)) ‚Åª¬π ‚ü© 
                                               ((neg‚Ñ§ l +‚Ñ§ neg‚Ñ§ p +‚Ñ§ inl x *‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ p)   ==‚ü® ap (Œª y ‚Üí y +‚Ñ§ inl x *‚Ñ§ p) (associative-+‚Ñ§ (neg‚Ñ§ l) (neg‚Ñ§ p) (inl x *‚Ñ§ l)) ‚ü© 
                                               ((neg‚Ñ§ l +‚Ñ§ (neg‚Ñ§ p +‚Ñ§ inl x *‚Ñ§ l) +‚Ñ§ inl x *‚Ñ§ p) ==‚ü® ap (Œª y ‚Üí neg‚Ñ§ l +‚Ñ§ y +‚Ñ§ inl x *‚Ñ§ p) (commutative-+‚Ñ§ (neg‚Ñ§ p) (inl x *‚Ñ§ l)) ‚ü© 
                                               ((neg‚Ñ§ l +‚Ñ§ (inl x *‚Ñ§ l +‚Ñ§ neg‚Ñ§ p) +‚Ñ§ inl x *‚Ñ§ p) ==‚ü® ap (Œª y ‚Üí y +‚Ñ§ inl x *‚Ñ§ p) ((associative-+‚Ñ§ (neg‚Ñ§ l) (inl x *‚Ñ§ l) (neg‚Ñ§ p)) ‚Åª¬π) ‚ü© 
                                               ((neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l +‚Ñ§ neg‚Ñ§ p +‚Ñ§ inl x *‚Ñ§ p)   ==‚ü® associative-+‚Ñ§ (neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l) (neg‚Ñ§ p) (inl x *‚Ñ§ p) ‚ü© 
                                               ((neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l +‚Ñ§ (neg‚Ñ§ p +‚Ñ§ inl x *‚Ñ§ p)) ‚àé)))))))
left-distirbutive-‚Ñ§ 0‚Ñ§                   l p = refl 0‚Ñ§
left-distirbutive-‚Ñ§ +1‚Ñ§                  l p = refl (l +‚Ñ§ p)
left-distirbutive-‚Ñ§ (inr (inr (succ x))) l p = (l +‚Ñ§ p +‚Ñ§ inr (inr x) *‚Ñ§ (l +‚Ñ§ p))                 ==‚ü® ap (Œª y ‚Üí l +‚Ñ§ p +‚Ñ§ y) (left-distirbutive-‚Ñ§ (inr (inr x)) l p) ‚ü© 
                                               ((l +‚Ñ§ p +‚Ñ§ (inr (inr x) *‚Ñ§ l +‚Ñ§ inr (inr x) *‚Ñ§ p)) ==‚ü® associative-+‚Ñ§ (l +‚Ñ§ p) (inr (inr x) *‚Ñ§ l) (inr (inr x) *‚Ñ§ p) ‚Åª¬π ‚ü© 
                                               ((l +‚Ñ§ p +‚Ñ§ inr (inr x) *‚Ñ§ l +‚Ñ§ inr (inr x) *‚Ñ§ p)   ==‚ü® ap (Œª y ‚Üí y +‚Ñ§ inr (inr x) *‚Ñ§ p) (associative-+‚Ñ§ l p (inr (inr x) *‚Ñ§ l)) ‚ü© 
                                               ((l +‚Ñ§ (p +‚Ñ§ inr (inr x) *‚Ñ§ l) +‚Ñ§ inr (inr x) *‚Ñ§ p) ==‚ü® ap (Œª y ‚Üí l +‚Ñ§ y +‚Ñ§ inr (inr x) *‚Ñ§ p) (commutative-+‚Ñ§ p (inr (inr x) *‚Ñ§ l)) ‚ü© 
                                               ((l +‚Ñ§ (inr (inr x) *‚Ñ§ l +‚Ñ§ p) +‚Ñ§ inr (inr x) *‚Ñ§ p) ==‚ü® ap (Œª y ‚Üí y +‚Ñ§ inr (inr x) *‚Ñ§ p) ((associative-+‚Ñ§ l (inr (inr x) *‚Ñ§ l) p) ‚Åª¬π) ‚ü© 
                                               ((l +‚Ñ§ inr (inr x) *‚Ñ§ l +‚Ñ§ p +‚Ñ§ inr (inr x) *‚Ñ§ p)   ==‚ü® associative-+‚Ñ§ (l +‚Ñ§ inr (inr x) *‚Ñ§ l) p (inr (inr x) *‚Ñ§ p) ‚ü© 
                                               ((l +‚Ñ§ inr (inr x) *‚Ñ§ l +‚Ñ§ (p +‚Ñ§ inr (inr x) *‚Ñ§ p)) ‚àé))))))

right-distirbutive-‚Ñ§ : (k l p : ‚Ñ§) ‚Üí (k +‚Ñ§ l) *‚Ñ§ p == k *‚Ñ§ p +‚Ñ§ l *‚Ñ§ p
right-distirbutive-‚Ñ§ -1‚Ñ§                  l p = (pred‚Ñ§ l *‚Ñ§ p)      ==‚ü® left-pred-law-*‚Ñ§ l p ‚ü© 
                                                ((l *‚Ñ§ p +‚Ñ§ neg‚Ñ§ p) ==‚ü® commutative-+‚Ñ§ (l *‚Ñ§ p) (neg‚Ñ§ p) ‚ü© 
                                                ((neg‚Ñ§ p +‚Ñ§ l *‚Ñ§ p) ‚àé))
right-distirbutive-‚Ñ§ (inl (succ x))       l p = (pred‚Ñ§ (inl x +‚Ñ§ l) *‚Ñ§ p)           ==‚ü® left-pred-law-*‚Ñ§ (inl x +‚Ñ§ l) p ‚ü© 
                                                (((inl x +‚Ñ§ l) *‚Ñ§ p +‚Ñ§ neg‚Ñ§ p)      ==‚ü® commutative-+‚Ñ§ ((inl x +‚Ñ§ l) *‚Ñ§ p) (neg‚Ñ§ p) ‚ü© 
                                                ((neg‚Ñ§ p +‚Ñ§ (inl x +‚Ñ§ l) *‚Ñ§ p)      ==‚ü® ap (Œª y ‚Üí neg‚Ñ§ p +‚Ñ§ y) (right-distirbutive-‚Ñ§ (inl x) l p) ‚ü© 
                                                ((neg‚Ñ§ p +‚Ñ§ (inl x *‚Ñ§ p +‚Ñ§ l *‚Ñ§ p)) ==‚ü® associative-+‚Ñ§ (neg‚Ñ§ p) (inl x *‚Ñ§ p) (l *‚Ñ§ p) ‚Åª¬π ‚ü© 
                                                ((neg‚Ñ§ p +‚Ñ§ inl x *‚Ñ§ p +‚Ñ§ l *‚Ñ§ p)   ‚àé))))
right-distirbutive-‚Ñ§ 0‚Ñ§                   l p = refl (l *‚Ñ§ p)
right-distirbutive-‚Ñ§ +1‚Ñ§                  l p = (succ‚Ñ§ l *‚Ñ§ p) ==‚ü® left-succ-law-*‚Ñ§ l p ‚ü© 
                                                ((l *‚Ñ§ p +‚Ñ§ p) ==‚ü® commutative-+‚Ñ§ (l *‚Ñ§ p) p ‚ü© 
                                                ((p +‚Ñ§ l *‚Ñ§ p) ‚àé))
right-distirbutive-‚Ñ§ (inr (inr (succ x))) l p = (succ‚Ñ§ (inr (inr x) +‚Ñ§ l) *‚Ñ§ p)      ==‚ü® left-succ-law-*‚Ñ§ (inr (inr x) +‚Ñ§ l) p ‚ü© 
                                                (((inr (inr x) +‚Ñ§ l) *‚Ñ§ p +‚Ñ§ p)      ==‚ü® commutative-+‚Ñ§ ((inr (inr x) +‚Ñ§ l) *‚Ñ§ p) p ‚ü© 
                                                ((p +‚Ñ§ (inr (inr x) +‚Ñ§ l) *‚Ñ§ p)      ==‚ü® ap (Œª y ‚Üí p +‚Ñ§ y) (right-distirbutive-‚Ñ§ (inr (inr x)) l p) ‚ü© 
                                                ((p +‚Ñ§ (inr (inr x) *‚Ñ§ p +‚Ñ§ l *‚Ñ§ p)) ==‚ü® (associative-+‚Ñ§ p (inr (inr x) *‚Ñ§ p) (l *‚Ñ§ p)) ‚Åª¬π ‚ü© 
                                                ((p +‚Ñ§ inr (inr x) *‚Ñ§ p +‚Ñ§ l *‚Ñ§ p)   ‚àé))))

associative-*‚Ñ§ : (k l p : ‚Ñ§) ‚Üí (k *‚Ñ§ l) *‚Ñ§ p == k *‚Ñ§ (l *‚Ñ§ p)
associative-*‚Ñ§ -1‚Ñ§                  l p = left-neg-law-‚Ñ§ l p ‚Åª¬π
associative-*‚Ñ§ (inl (succ x))       l p = ((neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l) *‚Ñ§ p)         ==‚ü® right-distirbutive-‚Ñ§ (neg‚Ñ§ l) (inl x *‚Ñ§ l) p ‚ü© 
                                          ((neg‚Ñ§ l *‚Ñ§ p +‚Ñ§ inl x *‚Ñ§ l *‚Ñ§ p)     ==‚ü® (ap (Œª y ‚Üí y +‚Ñ§ inl x *‚Ñ§ l *‚Ñ§ p) ((left-neg-law-‚Ñ§ l p) ‚Åª¬π)) ‚ü© 
                                          ((neg‚Ñ§ (l *‚Ñ§ p) +‚Ñ§ inl x *‚Ñ§ l *‚Ñ§ p)   ==‚ü® (ap (Œª y ‚Üí neg‚Ñ§ (l *‚Ñ§ p) +‚Ñ§ y) (associative-*‚Ñ§ (inl x) l p)) ‚ü© 
                                          ((neg‚Ñ§ (l *‚Ñ§ p) +‚Ñ§ inl x *‚Ñ§ (l *‚Ñ§ p)) ‚àé)))
associative-*‚Ñ§ 0‚Ñ§                   l p = refl 0‚Ñ§
associative-*‚Ñ§ +1‚Ñ§                  l p = refl (l *‚Ñ§ p)
associative-*‚Ñ§ (inr (inr (succ x))) l p = ((l +‚Ñ§ inr (inr x) *‚Ñ§ l) *‚Ñ§ p)       ==‚ü® (right-distirbutive-‚Ñ§ l (inr (inr x) *‚Ñ§ l) p) ‚ü© 
                                          ((l *‚Ñ§ p +‚Ñ§ inr (inr x) *‚Ñ§ l *‚Ñ§ p)   ==‚ü® ap (Œª y ‚Üí l *‚Ñ§ p +‚Ñ§ y) (associative-*‚Ñ§ (inr (inr x)) l p) ‚ü© 
                                          ((l *‚Ñ§ p +‚Ñ§ inr (inr x) *‚Ñ§ (l *‚Ñ§ p)) ‚àé))

commutative-*‚Ñ§ : (k l : ‚Ñ§) ‚Üí k *‚Ñ§ l == l *‚Ñ§ k 
commutative-*‚Ñ§ -1‚Ñ§                  l = (neg‚Ñ§ l)           ==‚ü® ap neg‚Ñ§ (right-unit-law-*‚Ñ§ l) ‚Åª¬π ‚ü© 
                                        ((neg‚Ñ§ (l *‚Ñ§ +1‚Ñ§)) ==‚ü® right-neg-law-‚Ñ§ l +1‚Ñ§ ‚ü© 
                                        ((l *‚Ñ§ inl zero)   ‚àé))
commutative-*‚Ñ§ (inl (succ x))       l = (neg‚Ñ§ l +‚Ñ§ inl x *‚Ñ§ l)           ==‚ü® ap (Œª y ‚Üí neg‚Ñ§ l +‚Ñ§ y) (commutative-*‚Ñ§ (inl x) l) ‚ü© 
                                        ((neg‚Ñ§ l +‚Ñ§ l *‚Ñ§ inl x)          ==‚ü® ap (Œª y ‚Üí neg‚Ñ§ y +‚Ñ§ l *‚Ñ§ inl x) (right-unit-law-*‚Ñ§ l ‚Åª¬π) ‚ü© 
                                        ((neg‚Ñ§ (l *‚Ñ§ +1‚Ñ§) +‚Ñ§ l *‚Ñ§ inl x) ==‚ü® ap (Œª y ‚Üí y +‚Ñ§ l *‚Ñ§ inl x) (right-neg-law-‚Ñ§ l +1‚Ñ§) ‚ü© 
                                        ((l *‚Ñ§ inl zero +‚Ñ§ l *‚Ñ§ inl x)   ==‚ü® ((left-distirbutive-‚Ñ§ l -1‚Ñ§ (inl x)) ‚Åª¬π) ‚ü© 
                                        ((l *‚Ñ§ inl (succ x))             ‚àé))))
commutative-*‚Ñ§ 0‚Ñ§                   l = right-zero-law-*‚Ñ§ l ‚Åª¬π
commutative-*‚Ñ§ +1‚Ñ§                  l = right-unit-law-*‚Ñ§ l ‚Åª¬π 
commutative-*‚Ñ§ (inr (inr (succ x))) l = (l +‚Ñ§ inr (inr x) *‚Ñ§ l)         ==‚ü® ap (Œª y ‚Üí l +‚Ñ§ y) (commutative-*‚Ñ§ (inr (inr x)) l) ‚ü© 
                                        ((l +‚Ñ§ l *‚Ñ§ inr (inr x))        ==‚ü® ap (Œª y ‚Üí y +‚Ñ§ l *‚Ñ§ inr (inr x)) ((right-unit-law-*‚Ñ§ l) ‚Åª¬π) ‚ü© 
                                        ((l *‚Ñ§ +1‚Ñ§ +‚Ñ§ l *‚Ñ§ inr (inr x)) ==‚ü® (left-distirbutive-‚Ñ§ l +1‚Ñ§ (inr (inr x))) ‚Åª¬π ‚ü© 
                                        ((l *‚Ñ§ inr (inr (succ x)))      ‚àé)))   