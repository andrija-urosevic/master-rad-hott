{-# OPTIONS --without-K --safe #-}

module Integer where

open import Natural public

โค : ๐คโ ฬ
โค = โ + (๐ + โ)

pattern 0โค  = inr (inl โ)
pattern +1โค  = inr (inr 0)
pattern -1โค = inl 0

+โค_ : โ โ โค
+โค n = (inr โ inr) n

-โค_ : โ โ โค
-โค n = inl n

โค-induction : (P : โค โ ๐ค ฬ )
            โ P -1โค
            โ ((n : โ) โ P (-โค n) โ P (-โค (succ n)))
            โ P 0โค
            โ P +1โค
            โ ((n : โ) โ P (+โค n) โ P (+โค (succ n)))
            โ (k : โค) โ P k
โค-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inl zero)           = p-neg-1
โค-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inl (succ x))       = p-neg-succ x (โค-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inl x))
โค-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inr true)           = p-zero
โค-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inr (inr zero))     = p-pos-1
โค-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inr (inr (succ x))) = p-pos-succ x (โค-induction P p-neg-1 p-neg-succ p-zero p-pos-1 p-pos-succ (inr (inr x))) 

succโค : โค โ โค
succโค -1โค = 0โค
succโค (inl (succ x)) = -โค x
succโค 0โค = +1โค
succโค +1โค = +โค 1
succโค (inr (inr (succ x))) = +โค (succ (succ x))
 
predโค : โค โ โค
predโค -1โค = -โค (succ 0)
predโค (inl (succ x)) = -โค (succ (succ x))
predโค 0โค = -1โค
predโค +1โค = 0โค 
predโค (inr (inr (succ x))) = +โค (succ x)

_+โค_ : โค โ โค โ โค
-1โค +โค y = predโค y
inl (succ x) +โค y = predโค (inl x +โค y) 
0โค +โค y = y
+1โค +โค y = succโค y 
inr (inr (succ x)) +โค y = succโค (inr (inr x) +โค y)

negโค : โค โ โค
negโค (inl x) = +โค x
negโค 0โค = 0โค
negโค (inr (inr x)) = -โค x

_*โค_ : โค โ โค โ โค
-1โค *โค y = negโค y
inl (succ x) *โค y = negโค y +โค ((inl x) *โค y) 
0โค *โค y = 0โค
+1โค *โค y = y 
inr (inr (succ x)) *โค y = y +โค ((inr (inr x)) *โค y)


