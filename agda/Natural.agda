{-# OPTIONS --without-K --safe #-}

module Natural where

open import MLTT public

data ‚Ñï : ùì§‚ÇÄ Ãá where
    zero : ‚Ñï
    succ : ‚Ñï ‚Üí ‚Ñï
    
{-# BUILTIN NATURAL ‚Ñï #-}

‚Ñï-induction : (P : ‚Ñï ‚Üí ùì§ Ãá )
            ‚Üí P 0
            ‚Üí ((n : ‚Ñï) ‚Üí P n ‚Üí P (succ n))
            ‚Üí (n : ‚Ñï) ‚Üí P n
‚Ñï-induction P p‚ÇÄ p‚Çõ zero     = p‚ÇÄ
‚Ñï-induction P p‚ÇÄ p‚Çõ (succ n) = p‚Çõ n (‚Ñï-induction P p‚ÇÄ p‚Çõ n)

‚Ñï-recursion : (A : ùì§ Ãá )
            ‚Üí A 
            ‚Üí (‚Ñï ‚Üí A ‚Üí A)
            ‚Üí ‚Ñï ‚Üí A
‚Ñï-recursion A = ‚Ñï-induction (Œª _ ‚Üí A)

‚Ñï-iteration : (A : ùì§ Ãá )
            ‚Üí A
            ‚Üí (A ‚Üí A)
            ‚Üí ‚Ñï ‚Üí A 
‚Ñï-iteration A a f = ‚Ñï-recursion A a (Œª _ a ‚Üí f a)

infixl 20 _+‚Ñï_
infixl 21 _*‚Ñï_
infixr 22 _^‚Ñï_
infixl 23 _!

_+‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
m +‚Ñï 0        = m 
m +‚Ñï (succ n) = succ (m +‚Ñï n)

_*‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
m *‚Ñï 0        = 0 
m *‚Ñï (succ n) = m +‚Ñï m *‚Ñï n

_^‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
m ^‚Ñï 0        = 1
m ^‚Ñï (succ n) = m *‚Ñï m ^‚Ñï n

min‚Ñï : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
min‚Ñï 0        0        = 0
min‚Ñï (succ m) 0        = 0
min‚Ñï 0        (succ n) = 0
min‚Ñï (succ m) (succ n) = succ (min‚Ñï m n)

max‚Ñï : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
max‚Ñï 0        0        = 0
max‚Ñï (succ m) 0        = succ m
max‚Ñï 0        (succ n) = succ n
max‚Ñï (succ m) (succ n) = succ (min‚Ñï m n)

_! : ‚Ñï ‚Üí ‚Ñï
0 !        = 1
(succ n) ! = succ n *‚Ñï n !

triangle : ‚Ñï ‚Üí ‚Ñï
triangle 0        = 0
triangle (succ n) = triangle n +‚Ñï succ n

fibonacci : ‚Ñï ‚Üí ‚Ñï
fibonacci 0               = 0
fibonacci 1               = 1
fibonacci (succ (succ n)) = fibonacci (succ n) +‚Ñï fibonacci n

binomial-coef : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
binomial-coef 0        0        = 1
binomial-coef 0        (succ k) = 0
binomial-coef (succ n) 0        = 1
binomial-coef (succ n) (succ k) = binomial-coef n k +‚Ñï binomial-coef n (succ k)

double : ‚Ñï ‚Üí ‚Ñï
double 0 = 0
double (succ n) = succ (succ (double n))

div2 : ‚Ñï ‚Üí ‚Ñï
div2 0 = 0
div2 1 = 0
div2 (succ (succ n)) = succ (div2 n)

add : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
add m n = ‚Ñï-recursion ‚Ñï m (Œª _ x ‚Üí succ x) n

mul :¬†‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï       
mul m n = ‚Ñï-recursion ‚Ñï 0 (Œª _ x ‚Üí add m x) n

pow : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
pow m n = ‚Ñï-recursion ‚Ñï 1 (Œª _ x ‚Üí mul m x) n

left-unit-law-+‚Ñï : (n : ‚Ñï) ‚Üí 0 +‚Ñï n == n 
left-unit-law-+‚Ñï 0        = refl 0 
left-unit-law-+‚Ñï (succ n) = ap succ (left-unit-law-+‚Ñï n)

right-unit-law-+‚Ñï : (n : ‚Ñï) ‚Üí n +‚Ñï 0 == n
right-unit-law-+‚Ñï = refl

left-succ-law-+‚Ñï : (m n : ‚Ñï) ‚Üí succ m +‚Ñï n == succ (m +‚Ñï n)
left-succ-law-+‚Ñï m 0        = refl (succ m)
left-succ-law-+‚Ñï m (succ n) = ap succ (left-succ-law-+‚Ñï m n)

right-succ-law-+‚Ñï : (m n : ‚Ñï) ‚Üí m +‚Ñï succ n == succ (m +‚Ñï n)
right-succ-law-+‚Ñï m n = refl (succ (m +‚Ñï n))

associative-+‚Ñï : (m n k : ‚Ñï) ‚Üí (m +‚Ñï n) +‚Ñï k == m +‚Ñï (n +‚Ñï k) 
associative-+‚Ñï m n 0        = refl (m +‚Ñï n)
associative-+‚Ñï m n (succ k) = ap succ (associative-+‚Ñï m n k)

commutative-+‚Ñï : (m n : ‚Ñï) ‚Üí m +‚Ñï n == n +‚Ñï m 
commutative-+‚Ñï 0 n        = left-unit-law-+‚Ñï n
commutative-+‚Ñï (succ m) n = (succ m +‚Ñï n)  ==‚ü® left-succ-law-+‚Ñï m n ‚ü© 
                            (succ (m +‚Ñï n) ==‚ü® ap succ (commutative-+‚Ñï m n) ‚ü© 
                            (succ (n +‚Ñï m) ‚àé))

left-zero-law-*‚Ñï : (n : ‚Ñï) ‚Üí 0 *‚Ñï n == 0
left-zero-law-*‚Ñï 0        = refl 0 
left-zero-law-*‚Ñï (succ n) = (0 +‚Ñï 0 *‚Ñï n) ==‚ü® left-unit-law-+‚Ñï (0 *‚Ñï n) ‚ü© 
                            ((0 *‚Ñï n)     ==‚ü® left-zero-law-*‚Ñï n ‚ü© 
                            (0            ‚àé))

right-zero-law-*‚Ñï : (m : ‚Ñï) ‚Üí m *‚Ñï 0 == 0
right-zero-law-*‚Ñï m = refl 0

left-unit-law-*‚Ñï : (n : ‚Ñï) ‚Üí 1 *‚Ñï n == n 
left-unit-law-*‚Ñï 0        = refl 0 
left-unit-law-*‚Ñï (succ n) = (1 +‚Ñï 1 *‚Ñï n)            ==‚ü® left-succ-law-+‚Ñï zero (1 *‚Ñï n) ‚ü© 
                            ((succ (zero +‚Ñï 1 *‚Ñï n)) ==‚ü® (ap succ (left-unit-law-+‚Ñï (1 *‚Ñï n))) ‚ü© 
                            ((succ (1 *‚Ñï n))         ==‚ü® ap succ (left-unit-law-*‚Ñï n) ‚ü© 
                            ((succ n)                ‚àé))) 
                        
right-unit-law-*‚Ñï : (m : ‚Ñï) ‚Üí m *‚Ñï 1 == m 
right-unit-law-*‚Ñï m = refl m

left-succ-law-*‚Ñï : (m n : ‚Ñï) ‚Üí m *‚Ñï (succ n) == m +‚Ñï m *‚Ñï n 
left-succ-law-*‚Ñï m n = refl (m +‚Ñï m *‚Ñï n)

right-succ-law-*‚Ñï : (m n : ‚Ñï) ‚Üí (succ m) *‚Ñï n == m *‚Ñï n +‚Ñï n 
right-succ-law-*‚Ñï m 0        = refl 0 
right-succ-law-*‚Ñï m (succ n) = (succ m +‚Ñï succ m *‚Ñï n)      ==‚ü® ap (Œª x ‚Üí succ m +‚Ñï x) (right-succ-law-*‚Ñï m n) ‚ü© 
                               ((succ m +‚Ñï (m *‚Ñï n +‚Ñï n))   ==‚ü® left-succ-law-+‚Ñï m (m *‚Ñï n +‚Ñï n) ‚ü© 
                               ((succ (m +‚Ñï (m *‚Ñï n +‚Ñï n))) ==‚ü® ap succ (associative-+‚Ñï m (m *‚Ñï n) n ‚Åª¬π) ‚ü© 
                               ((succ (m +‚Ñï m *‚Ñï n +‚Ñï n))   ‚àé))) 

commutative-*‚Ñï : (m n : ‚Ñï) ‚Üí m *‚Ñï n == n *‚Ñï m 
commutative-*‚Ñï m 0        = (left-zero-law-*‚Ñï m) ‚Åª¬π 
commutative-*‚Ñï m (succ n) = (m +‚Ñï m *‚Ñï n)  ==‚ü® commutative-+‚Ñï m (m *‚Ñï n) ‚ü© 
                            ((m *‚Ñï n +‚Ñï m) ==‚ü® ap (Œª x ‚Üí x +‚Ñï m) (commutative-*‚Ñï m n) ‚ü© 
                            ((n *‚Ñï m +‚Ñï m) ==‚ü® right-succ-law-*‚Ñï n m ‚Åª¬π ‚ü© 
                            ((succ n *‚Ñï m) ‚àé)))

