{-# OPTIONS --without-K --safe #-}

module Natural where

open import MLTT public

data ‚Ñï : ùì§‚ÇÄ Ãá where
    zero : ‚Ñï
    succ : ‚Ñï ‚Üí ‚Ñï
    
{-# BUILTIN NATURAL ‚Ñï #-}

‚Ñï-induction : (P : ‚Ñï ‚Üí ùì§ Ãá )
            ‚Üí P 0
            ‚Üí ((n : ‚Ñï) ‚Üí P n ‚Üí P (succ n))
            ‚Üí (n : ‚Ñï) ‚Üí P n
‚Ñï-induction P p‚ÇÄ p‚Çõ zero     = p‚ÇÄ
‚Ñï-induction P p‚ÇÄ p‚Çõ (succ n) = p‚Çõ n (‚Ñï-induction P p‚ÇÄ p‚Çõ n)

‚Ñï-recursion : (A : ùì§ Ãá )
            ‚Üí A 
            ‚Üí (‚Ñï ‚Üí A ‚Üí A)
            ‚Üí ‚Ñï ‚Üí A
‚Ñï-recursion A = ‚Ñï-induction (Œª _ ‚Üí A)

‚Ñï-iteration : (A : ùì§ Ãá )
            ‚Üí A
            ‚Üí (A ‚Üí A)
            ‚Üí ‚Ñï ‚Üí A 
‚Ñï-iteration A a f = ‚Ñï-recursion A a (Œª _ a ‚Üí f a)

infixl 20 _+‚Ñï_
infixl 21 _*‚Ñï_
infixr 22 _^‚Ñï_
infixl 23 _!

_+‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
0 +‚Ñï n        = n 
(succ m) +‚Ñï n = succ (m +‚Ñï n)

_*‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
0 *‚Ñï n        = 0 
(succ m) *‚Ñï n = m *‚Ñï n +‚Ñï n

_^‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
m ^‚Ñï 0        = 1
m ^‚Ñï (succ n) = m *‚Ñï m ^‚Ñï n

min‚Ñï : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
min‚Ñï 0        0        = 0
min‚Ñï (succ m) 0        = 0
min‚Ñï 0        (succ n) = 0
min‚Ñï (succ m) (succ n) = succ (min‚Ñï m n)

max‚Ñï : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
max‚Ñï 0        0        = 0
max‚Ñï (succ m) 0        = succ m
max‚Ñï 0        (succ n) = succ n
max‚Ñï (succ m) (succ n) = succ (min‚Ñï m n)

_! : ‚Ñï ‚Üí ‚Ñï
0 !        = 1
(succ n) ! = succ n *‚Ñï n !

triangle : ‚Ñï ‚Üí ‚Ñï
triangle 0        = 0
triangle (succ n) = triangle n +‚Ñï succ n

fibonacci : ‚Ñï ‚Üí ‚Ñï
fibonacci 0               = 0
fibonacci 1               = 1
fibonacci (succ (succ n)) = fibonacci (succ n) +‚Ñï fibonacci n

binomial-coef : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
binomial-coef 0        0        = 1
binomial-coef 0        (succ k) = 0
binomial-coef (succ n) 0        = 1
binomial-coef (succ n) (succ k) = binomial-coef n k +‚Ñï binomial-coef n (succ k)

double : ‚Ñï ‚Üí ‚Ñï
double 0 = 0
double (succ n) = succ (succ (double n))

div2 : ‚Ñï ‚Üí ‚Ñï
div2 0 = 0
div2 1 = 0
div2 (succ (succ n)) = succ (div2 n)

add : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
add m n = ‚Ñï-recursion ‚Ñï m (Œª _ x ‚Üí succ x) n

mul :¬†‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï       
mul m n = ‚Ñï-recursion ‚Ñï 0 (Œª _ x ‚Üí add m x) n

pow : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
pow m n = ‚Ñï-recursion ‚Ñï 1 (Œª _ x ‚Üí mul m x) n

left-zero-law-+‚Ñï : (n : ‚Ñï) ‚Üí 0 +‚Ñï n == n 
left-zero-law-+‚Ñï n = refl n

right-zero-law-+‚Ñï : (n : ‚Ñï) ‚Üí n +‚Ñï 0 == n
right-zero-law-+‚Ñï 0        = refl 0
right-zero-law-+‚Ñï (succ n) = ap succ (right-zero-law-+‚Ñï n)

left-unit-law-+‚Ñï : (n : ‚Ñï) ‚Üí 1 +‚Ñï n == succ n 
left-unit-law-+‚Ñï n = refl (succ n)

right-unit-law-+‚Ñï : (n : ‚Ñï) ‚Üí n +‚Ñï 1 == succ n 
right-unit-law-+‚Ñï 0        = refl 1
right-unit-law-+‚Ñï (succ n) = ap succ (right-unit-law-+‚Ñï n)

left-succ-law-+‚Ñï : (m n : ‚Ñï) ‚Üí succ m +‚Ñï n == succ (m +‚Ñï n)
left-succ-law-+‚Ñï m n = refl (succ (m +‚Ñï n))

right-succ-law-+‚Ñï : (m n : ‚Ñï) ‚Üí m +‚Ñï succ n == succ (m +‚Ñï n)
right-succ-law-+‚Ñï 0        n = refl (succ n)
right-succ-law-+‚Ñï (succ m) n = ap succ (right-succ-law-+‚Ñï m n)

associative-+‚Ñï : (m n k : ‚Ñï) ‚Üí (m +‚Ñï n) +‚Ñï k == m +‚Ñï (n +‚Ñï k) 
associative-+‚Ñï 0        n k = refl (n +‚Ñï k)
associative-+‚Ñï (succ m) n k = ap succ (associative-+‚Ñï m n k)

commutative-+‚Ñï : (m n : ‚Ñï) ‚Üí m +‚Ñï n == n +‚Ñï m 
commutative-+‚Ñï 0        n = right-zero-law-+‚Ñï n ‚Åª¬π
commutative-+‚Ñï (succ m) n = (succ (m +‚Ñï n))  ==‚ü® ap succ (commutative-+‚Ñï m n) ‚ü© 
                            ((succ (n +‚Ñï m)) ==‚ü® right-succ-law-+‚Ñï n m ‚Åª¬π ‚ü© 
                            ((n +‚Ñï succ m)   ‚àé))

left-zero-law-*‚Ñï : (n : ‚Ñï) ‚Üí 0 *‚Ñï n == 0
left-zero-law-*‚Ñï 0        = refl 0 
left-zero-law-*‚Ñï (succ n) = (0 +‚Ñï 0 *‚Ñï n) ==‚ü® left-zero-law-+‚Ñï (0 *‚Ñï n) ‚ü© 
                            ((0 *‚Ñï n)     ==‚ü® left-zero-law-*‚Ñï n ‚ü© 
                            (0            ‚àé))

right-zero-law-*‚Ñï : (m : ‚Ñï) ‚Üí m *‚Ñï 0 == 0
right-zero-law-*‚Ñï 0 = refl 0
right-zero-law-*‚Ñï (succ m) = (m *‚Ñï 0 +‚Ñï 0) ==‚ü® right-zero-law-+‚Ñï (m *‚Ñï zero) ‚ü© 
                             ((m *‚Ñï 0)     ==‚ü® right-zero-law-*‚Ñï m ‚ü© 
                             (0            ‚àé))

left-unit-law-*‚Ñï : (n : ‚Ñï) ‚Üí 1 *‚Ñï n == n 
left-unit-law-*‚Ñï n = refl n

right-unit-law-*‚Ñï : (m : ‚Ñï) ‚Üí m *‚Ñï 1 == m 
right-unit-law-*‚Ñï 0        = refl 0
right-unit-law-*‚Ñï (succ m) = (m *‚Ñï 1 +‚Ñï 1) ==‚ü® ap (Œª x ‚Üí x +‚Ñï 1) (right-unit-law-*‚Ñï m) ‚ü© 
                             ((m +‚Ñï 1)     ==‚ü® right-unit-law-+‚Ñï m ‚ü© 
                             ((succ m)     ‚àé))

right-succ-law-*‚Ñï : (m n : ‚Ñï) ‚Üí m *‚Ñï (succ n) == m *‚Ñï n +‚Ñï m
right-succ-law-*‚Ñï 0        n = refl 0
right-succ-law-*‚Ñï (succ m) n = (m *‚Ñï succ n +‚Ñï succ n)    ==‚ü® ap (Œª x ‚Üí x +‚Ñï succ n) (right-succ-law-*‚Ñï m n) ‚ü© 
                               ((m *‚Ñï n +‚Ñï m +‚Ñï succ n)   ==‚ü® associative-+‚Ñï (m *‚Ñï n) m (succ n) ‚ü© 
                               ((m *‚Ñï n +‚Ñï (m +‚Ñï succ n)) ==‚ü® ap (Œª x ‚Üí m *‚Ñï n +‚Ñï x) (commutative-+‚Ñï m (succ n)) ‚ü© 
                               ((m *‚Ñï n +‚Ñï succ (n +‚Ñï m)) ==‚ü® ap (Œª x ‚Üí m *‚Ñï n +‚Ñï x) (right-succ-law-+‚Ñï n m ‚Åª¬π) ‚ü© 
                               ((m *‚Ñï n +‚Ñï (n +‚Ñï succ m)) ==‚ü® (associative-+‚Ñï (m *‚Ñï n) n (succ m)) ‚Åª¬π ‚ü© 
                               ((m *‚Ñï n +‚Ñï n +‚Ñï succ m)   ‚àé)))))

left-succ-law-*‚Ñï : (m n : ‚Ñï) ‚Üí (succ m) *‚Ñï n == m *‚Ñï n +‚Ñï n 
left-succ-law-*‚Ñï m n = refl (m *‚Ñï n +‚Ñï n)

commutative-*‚Ñï : (m n : ‚Ñï) ‚Üí m *‚Ñï n == n *‚Ñï m 
commutative-*‚Ñï m 0        = right-zero-law-*‚Ñï m
commutative-*‚Ñï m (succ n) = (m *‚Ñï succ n)  ==‚ü® right-succ-law-*‚Ñï m n ‚ü© 
                            ((m *‚Ñï n +‚Ñï m) ==‚ü® ap (Œª x ‚Üí x +‚Ñï m) (commutative-*‚Ñï m n) ‚ü© 
                            ((n *‚Ñï m +‚Ñï m) ==‚ü® left-succ-law-*‚Ñï n m ‚Åª¬π ‚ü© 
                            ((n *‚Ñï m +‚Ñï m) ‚àé)))

right-distirbutive-‚Ñï : (m n k : ‚Ñï) ‚Üí (m +‚Ñï n) *‚Ñï k == m *‚Ñï k +‚Ñï n *‚Ñï k 
right-distirbutive-‚Ñï 0 n k = refl (n *‚Ñï k)
right-distirbutive-‚Ñï (succ m) n k = ((m +‚Ñï n) *‚Ñï k +‚Ñï k)       ==‚ü® ap (Œª x ‚Üí x +‚Ñï k) (right-distirbutive-‚Ñï m n k) ‚ü© 
                                    ((m *‚Ñï k +‚Ñï n *‚Ñï k +‚Ñï k)   ==‚ü® associative-+‚Ñï (m *‚Ñï k) (n *‚Ñï k) k ‚ü© 
                                    ((m *‚Ñï k +‚Ñï (n *‚Ñï k +‚Ñï k)) ==‚ü® ap (Œª x ‚Üí m *‚Ñï k +‚Ñï x) (commutative-+‚Ñï (n *‚Ñï k) k) ‚ü© 
                                    ((m *‚Ñï k +‚Ñï (k +‚Ñï n *‚Ñï k)) ==‚ü® associative-+‚Ñï (m *‚Ñï k) k (n *‚Ñï k) ‚Åª¬π ‚ü© 
                                    ((m *‚Ñï k +‚Ñï k +‚Ñï n *‚Ñï k)   ==‚ü® ap (Œª x ‚Üí x +‚Ñï n *‚Ñï k) (left-succ-law-*‚Ñï m k ‚Åª¬π) ‚ü© 
                                    ((m *‚Ñï k +‚Ñï k +‚Ñï n *‚Ñï k)   ‚àé)))))

left-distirbutive-‚Ñï : (m n k : ‚Ñï) ‚Üí m *‚Ñï (n +‚Ñï k) == m *‚Ñï n +‚Ñï m *‚Ñï k 
left-distirbutive-‚Ñï m n k = (m *‚Ñï (n +‚Ñï k))     ==‚ü® commutative-*‚Ñï m (n +‚Ñï k) ‚ü© 
                            (((n +‚Ñï k) *‚Ñï m)    ==‚ü® right-distirbutive-‚Ñï n k m ‚ü© 
                            ((n *‚Ñï m +‚Ñï k *‚Ñï m) ==‚ü® ap (Œª x ‚Üí x +‚Ñï k *‚Ñï m) (commutative-*‚Ñï n m) ‚ü© 
                            ((m *‚Ñï n +‚Ñï k *‚Ñï m) ==‚ü® ap (Œª x ‚Üí m *‚Ñï n +‚Ñï x) (commutative-*‚Ñï k m) ‚ü© 
                            ((m *‚Ñï n +‚Ñï m *‚Ñï k) ‚àé))))

associative-*‚Ñï : (m n k : ‚Ñï) ‚Üí (m *‚Ñï n) *‚Ñï k == m *‚Ñï (n *‚Ñï k)
associative-*‚Ñï 0        n k = refl 0
associative-*‚Ñï (succ m) n k = ((m *‚Ñï n +‚Ñï n) *‚Ñï k)       ==‚ü® right-distirbutive-‚Ñï (m *‚Ñï n) n k ‚ü© 
                              ((m *‚Ñï n *‚Ñï k +‚Ñï n *‚Ñï k)   ==‚ü® ap (Œª x ‚Üí x +‚Ñï n *‚Ñï k) (associative-*‚Ñï m n k) ‚ü© 
                              ((m *‚Ñï (n *‚Ñï k) +‚Ñï n *‚Ñï k) ==‚ü® left-succ-law-*‚Ñï m (n *‚Ñï k) ‚Åª¬π ‚ü© 
                              ((m *‚Ñï (n *‚Ñï k) +‚Ñï n *‚Ñï k) ‚àé)))

Eq-‚Ñï : ‚Ñï ‚Üí ‚Ñï ‚Üí ùì§‚ÇÄ Ãá
Eq-‚Ñï 0        0        = ùüô
Eq-‚Ñï 0        (succ n) = ùüò 
Eq-‚Ñï (succ m) 0        = ùüò 
Eq-‚Ñï (succ m) (succ n) = Eq-‚Ñï m n

relf-Eq-‚Ñï : (n : ‚Ñï) ‚Üí Eq-‚Ñï n n 
relf-Eq-‚Ñï 0        = ‚ãÜ 
relf-Eq-‚Ñï (succ n) = relf-Eq-‚Ñï n

id-Eq-‚Ñï : {m n : ‚Ñï} ‚Üí m == n ‚Üí Eq-‚Ñï m n 
id-Eq-‚Ñï {m} {n} p = tr (Eq-‚Ñï m) p (relf-Eq-‚Ñï m)

Eq-‚Ñï-id : (m n : ‚Ñï) ‚Üí Eq-‚Ñï m n ‚Üí m == n
Eq-‚Ñï-id 0        0        eq = refl 0
Eq-‚Ñï-id (succ m) (succ n) eq = ap succ (Eq-‚Ñï-id m n eq)

injective-succ-‚Ñï : (m n : ‚Ñï) ‚Üí succ m == succ n ‚Üí m == n
injective-succ-‚Ñï m n e = Eq-‚Ñï-id m n (id-Eq-‚Ñï e)

decidable-Eq-‚Ñï : (m n : ‚Ñï) ‚Üí decidable (Eq-‚Ñï m n)
decidable-Eq-‚Ñï 0        0        = inl ‚ãÜ
decidable-Eq-‚Ñï 0        (succ n) = inr (Œª x ‚Üí x)
decidable-Eq-‚Ñï (succ m) 0        = inr (Œª x ‚Üí x)
decidable-Eq-‚Ñï (succ m) (succ n) = decidable-Eq-‚Ñï m n

peano-7-axiom : (n m : ‚Ñï) ‚Üí (m == n) ‚Üî (succ m == succ n)
peano-7-axiom n m = ap succ , injective-succ-‚Ñï m n

peano-8-axiom : (n : ‚Ñï) ‚Üí ¬¨ (0 == succ n)
peano-8-axiom n = id-Eq-‚Ñï

peano-8-axiom' : (n : ‚Ñï) ‚Üí ¬¨ (succ n == 0)
peano-8-axiom' n = id-Eq-‚Ñï

left-injective-+‚Ñï : (k m n : ‚Ñï) ‚Üí k +‚Ñï m == k +‚Ñï n ‚Üí m == n
left-injective-+‚Ñï 0        m n p = p
left-injective-+‚Ñï (succ k) m n p = left-injective-+‚Ñï k m n (injective-succ-‚Ñï (k +‚Ñï m) (k +‚Ñï n) p)

right-injective-+‚Ñï : (k m n : ‚Ñï) ‚Üí m +‚Ñï k == n +‚Ñï k ‚Üí m == n 
right-injective-+‚Ñï 0        m n p = m         ==‚ü® right-zero-law-+‚Ñï m ‚Åª¬π ‚ü© 
                                    ((m +‚Ñï 0) ==‚ü® p ‚ü© 
                                    ((n +‚Ñï 0) ==‚ü® right-zero-law-+‚Ñï n ‚ü© 
                                    (n        ‚àé)))
right-injective-+‚Ñï (succ k) m n p = right-injective-+‚Ñï k m n (injective-succ-‚Ñï (m +‚Ñï k) (n +‚Ñï k) ((succ (m +‚Ñï k))  ==‚ü® right-succ-law-+‚Ñï m k ‚Åª¬π ‚ü© 
                                                                                                  ((m +‚Ñï succ k)   ==‚ü® p ‚ü© 
                                                                                                  ((n +‚Ñï succ k)   ==‚ü® right-succ-law-+‚Ñï n k ‚ü© 
                                                                                                  ((succ (n +‚Ñï k)) ‚àé)))))

left-reflective-+‚Ñï : (k m n : ‚Ñï) ‚Üí m == n ‚Üí k +‚Ñï m == k +‚Ñï n 
left-reflective-+‚Ñï 0        m n p = p
left-reflective-+‚Ñï (succ k) m n p = ap succ (left-reflective-+‚Ñï k m n p)

right-reflective-+‚Ñï : (k m n : ‚Ñï) ‚Üí m == n ‚Üí m +‚Ñï k == n +‚Ñï k 
right-reflective-+‚Ñï 0        m n p = (m +‚Ñï 0)  ==‚ü® right-zero-law-+‚Ñï m ‚ü© 
                                     (m        ==‚ü® p ‚ü© 
                                     (n        ==‚ü® ((right-zero-law-+‚Ñï n) ‚Åª¬π) ‚ü© 
                                     ((n +‚Ñï 0) ‚àé)))
right-reflective-+‚Ñï (succ k) m n p = (m +‚Ñï succ k)    ==‚ü® right-succ-law-+‚Ñï m k ‚ü© 
                                     ((succ (m +‚Ñï k)) ==‚ü® ap succ (commutative-+‚Ñï m k) ‚ü© 
                                     ((succ (k +‚Ñï m)) ==‚ü® ap (Œª x ‚Üí succ (k +‚Ñï x)) p ‚ü© 
                                     ((succ (k +‚Ñï n)) ==‚ü® ap succ (commutative-+‚Ñï k n) ‚ü© 
                                     ((succ (n +‚Ñï k)) ==‚ü® right-succ-law-+‚Ñï n k ‚Åª¬π ‚ü© 
                                     ((n +‚Ñï succ k)   ‚àé)))))

right-injective-*‚Ñï : (k m n : ‚Ñï) ‚Üí m *‚Ñï (succ k) == n *‚Ñï (succ k) ‚Üí m == n 
right-injective-*‚Ñï k 0        0        p = refl 0
right-injective-*‚Ñï k 0        (succ n) p = ùüò-recursion 
                                            (Id ‚Ñï zero (succ n)) 
                                            (peano-8-axiom (n *‚Ñï succ k +‚Ñï k) (0                         ==‚ü® p ‚ü© 
                                                                              ((n *‚Ñï succ k +‚Ñï succ k)   ==‚ü® right-succ-law-+‚Ñï (n *‚Ñï succ k) k ‚ü© 
                                                                              ((succ (n *‚Ñï succ k +‚Ñï k)) ‚àé))))
right-injective-*‚Ñï k (succ m) 0        p = ùüò-recursion 
                                            (Id ‚Ñï (succ m) zero) 
                                            (peano-8-axiom (m *‚Ñï succ k +‚Ñï k) (0 ==‚ü® (p ‚Åª¬π) ‚ü© 
                                                                              ((m *‚Ñï succ k +‚Ñï succ k) ==‚ü® right-succ-law-+‚Ñï (m *‚Ñï succ k) k ‚ü© 
                                                                              ((succ (m *‚Ñï succ k +‚Ñï k)) ‚àé))))
right-injective-*‚Ñï k (succ m) (succ n) p = ap succ (right-injective-*‚Ñï k m n (right-injective-+‚Ñï (succ k) (m *‚Ñï succ k) (n *‚Ñï succ k) p))

left-injective-*‚Ñï : (k m n : ‚Ñï) ‚Üí (succ k) *‚Ñï m == (succ k) *‚Ñï n ‚Üí m == n 
left-injective-*‚Ñï k m n p = right-injective-*‚Ñï k m n ((m *‚Ñï succ k) ==‚ü® commutative-*‚Ñï m (succ k) ‚ü© 
                                                     ((k *‚Ñï m +‚Ñï m) ==‚ü® p ‚ü© 
                                                     ((k *‚Ñï n +‚Ñï n) ==‚ü® left-succ-law-*‚Ñï k n ‚Åª¬π ‚ü© 
                                                     ((succ k *‚Ñï n) ==‚ü® commutative-*‚Ñï (succ k) n ‚ü© 
                                                     ((n *‚Ñï succ k) ‚àé)))))
                                             
right-neq-+‚Ñï : (m n : ‚Ñï) ‚Üí ¬¨ (m == m +‚Ñï succ n)
right-neq-+‚Ñï (succ m) n p = right-neq-+‚Ñï m n (injective-succ-‚Ñï  m (m +‚Ñï succ n) p)

left-neq-+‚Ñï : (m n : ‚Ñï) ‚Üí ¬¨ (m == succ n +‚Ñï m)
left-neq-+‚Ñï m n p = right-neq-+‚Ñï m n (m               ==‚ü® p ‚ü© 
                                     ((succ (n +‚Ñï m)) ==‚ü® ap succ (commutative-+‚Ñï n m) ‚ü© 
                                     ((succ (m +‚Ñï n)) ==‚ü® right-succ-law-+‚Ñï m n ‚Åª¬π ‚ü© 
                                     ((m +‚Ñï succ n)   ‚àé))))

right-neq-*‚Ñï : (m n : ‚Ñï) ‚Üí ¬¨ (succ m == succ m *‚Ñï (succ (succ n)))
right-neq-*‚Ñï m n p = right-neq-+‚Ñï (succ m) (m *‚Ñï succ n +‚Ñï n) (succ m                                ==‚ü® p ‚ü© 
                                                              ((m *‚Ñï succ (succ n) +‚Ñï succ (succ n)) ==‚ü® right-succ-law-+‚Ñï (m *‚Ñï succ (succ n)) (succ n) ‚ü© 
                                                              ((succ (m *‚Ñï succ (succ n) +‚Ñï succ n)) ==‚ü® ap (Œª x ‚Üí succ (x +‚Ñï succ n)) (right-succ-law-*‚Ñï m (succ n)) ‚ü© 
                                                              ((succ (m *‚Ñï succ n +‚Ñï m +‚Ñï succ n))   ==‚ü® ap (Œª x ‚Üí succ (x +‚Ñï succ n)) (commutative-+‚Ñï (m *‚Ñï succ n) m) ‚ü© 
                                                              ((succ (m +‚Ñï m *‚Ñï succ n +‚Ñï succ n))   ==‚ü® ap (Œª x ‚Üí succ x) (associative-+‚Ñï m (m *‚Ñï succ n) (succ n)) ‚ü© 
                                                              ((succ (m +‚Ñï (m *‚Ñï succ n +‚Ñï succ n))) ==‚ü® ap (Œª x ‚Üí succ (m +‚Ñï x)) (right-succ-law-+‚Ñï (m *‚Ñï succ n) n) ‚ü© 
                                                              ((succ (m +‚Ñï succ (m *‚Ñï succ n +‚Ñï n))) ‚àé)))))))

left-neq-*‚Ñï : (m n : ‚Ñï) ‚Üí ¬¨ (succ m == (succ (succ n)) *‚Ñï succ m)
left-neq-*‚Ñï m n p = right-neq-*‚Ñï m n ((succ m)                     ==‚ü® p ‚ü© 
                                      (((succ (succ n)) *‚Ñï succ m) ==‚ü® commutative-*‚Ñï (succ (succ n)) (succ m) ‚ü© 
                                      ((succ m *‚Ñï (succ (succ n))) ‚àé))) 

_‚â§‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùì§‚ÇÄ Ãá 
0      ‚â§‚Ñï n      = ùüô 
succ m ‚â§‚Ñï 0      = ùüò 
succ m ‚â§‚Ñï succ n = m ‚â§‚Ñï n

reflexive-‚â§‚Ñï : (m : ‚Ñï) ‚Üí m ‚â§‚Ñï m 
reflexive-‚â§‚Ñï 0        = ‚ãÜ 
reflexive-‚â§‚Ñï (succ m) = reflexive-‚â§‚Ñï m

antisymmetric-‚â§‚Ñï : (m n : ‚Ñï) ‚Üí m ‚â§‚Ñï n ‚Üí n ‚â§‚Ñï m ‚Üí m == n 
antisymmetric-‚â§‚Ñï 0        0        p q = refl 0
antisymmetric-‚â§‚Ñï 0        (succ n) p q = ùüò-recursion (Id ‚Ñï 0 (succ n)) q
antisymmetric-‚â§‚Ñï (succ m) 0        p q = ùüò-recursion (Id ‚Ñï (succ m) 0) p 
antisymmetric-‚â§‚Ñï (succ m) (succ n) p q = ap succ (antisymmetric-‚â§‚Ñï m n p q)

transitive-‚â§‚Ñï : (m n k : ‚Ñï) ‚Üí m ‚â§‚Ñï n ‚Üí n ‚â§‚Ñï k ‚Üí m ‚â§‚Ñï k 
transitive-‚â§‚Ñï 0        n        k        p q = ‚ãÜ
transitive-‚â§‚Ñï (succ m) (succ n) 0        p q = q
transitive-‚â§‚Ñï (succ m) (succ n) (succ k) p q = transitive-‚â§‚Ñï m n k p q

decidable-‚â§‚Ñï : (m n : ‚Ñï) ‚Üí decidable (m ‚â§‚Ñï n)
decidable-‚â§‚Ñï 0        0        = inl ‚ãÜ
decidable-‚â§‚Ñï 0        (succ n) = inl ‚ãÜ
decidable-‚â§‚Ñï (succ m) 0        = inr (Œª x ‚Üí x)
decidable-‚â§‚Ñï (succ m) (succ n) = decidable-‚â§‚Ñï m n

preserve-order-+‚Ñï : (k m n : ‚Ñï) ‚Üí (m ‚â§‚Ñï n) ‚Üí ((k +‚Ñï m) ‚â§‚Ñï (k +‚Ñï n))
preserve-order-+‚Ñï 0        m n p = p
preserve-order-+‚Ñï (succ k) m n p = preserve-order-+‚Ñï k m n p

reflects-order-+‚Ñï : (k m n : ‚Ñï) ‚Üí ((k +‚Ñï m) ‚â§‚Ñï (k +‚Ñï n)) ‚Üí (m ‚â§‚Ñï n)
reflects-order-+‚Ñï 0        m n p = p
reflects-order-+‚Ñï (succ k) m n p = reflects-order-+‚Ñï k m n p

preserve-order-succ-‚Ñï : (m n : ‚Ñï) ‚Üí (m ‚â§‚Ñï n) ‚Üí (succ m ‚â§‚Ñï succ n)
preserve-order-succ-‚Ñï m n p = p

reflects-order-succ-‚Ñï : (m n : ‚Ñï) ‚Üí (succ m ‚â§‚Ñï succ n) ‚Üí m ‚â§‚Ñï n 
reflects-order-succ-‚Ñï m n p = p

left-zero-law-‚â§‚Ñï : (n : ‚Ñï) ‚Üí (n +‚Ñï 0) ‚â§‚Ñï n
left-zero-law-‚â§‚Ñï 0        = ‚ãÜ
left-zero-law-‚â§‚Ñï (succ n) = left-zero-law-‚â§‚Ñï n

right-zero-law-‚â§‚Ñï : (n : ‚Ñï) ‚Üí n ‚â§‚Ñï (n +‚Ñï 0)
right-zero-law-‚â§‚Ñï 0        = ‚ãÜ
right-zero-law-‚â§‚Ñï (succ n) = right-zero-law-‚â§‚Ñï n

succ-law-‚â§‚Ñï : (n : ‚Ñï) ‚Üí n ‚â§‚Ñï succ n 
succ-law-‚â§‚Ñï 0        = ‚ãÜ
succ-law-‚â§‚Ñï (succ n) = succ-law-‚â§‚Ñï n

left-succ-law-‚â§‚Ñï : (m n : ‚Ñï) ‚Üí succ m ‚â§‚Ñï n ‚Üí m ‚â§‚Ñï n 
left-succ-law-‚â§‚Ñï 0        (succ n) p = ‚ãÜ
left-succ-law-‚â§‚Ñï (succ m) (succ n) p = left-succ-law-‚â§‚Ñï m n p

right-succ-law-‚â§‚Ñï : (m n : ‚Ñï) ‚Üí m ‚â§‚Ñï n ‚Üí m ‚â§‚Ñï succ n 
right-succ-law-‚â§‚Ñï zero     n        p = ‚ãÜ
right-succ-law-‚â§‚Ñï (succ m) (succ n) p = right-succ-law-‚â§‚Ñï m n p 

unit-law-‚â§‚Ñï : (n : ‚Ñï) ‚Üí n ‚â§‚Ñï succ n 
unit-law-‚â§‚Ñï 0        = ‚ãÜ
unit-law-‚â§‚Ñï (succ n) = unit-law-‚â§‚Ñï n

concat-id-leq-id : (x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ : ‚Ñï) ‚Üí x‚ÇÅ == x‚ÇÇ ‚Üí x‚ÇÇ ‚â§‚Ñï x‚ÇÉ ‚Üí x‚ÇÉ == x‚ÇÑ ‚Üí x‚ÇÅ ‚â§‚Ñï x‚ÇÑ
concat-id-leq-id x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ (refl _) q (refl _) = q

concat-leq-id : (x‚ÇÅ x‚ÇÇ x‚ÇÉ : ‚Ñï) ‚Üí x‚ÇÅ ‚â§‚Ñï x‚ÇÇ ‚Üí x‚ÇÇ == x‚ÇÉ ‚Üí x‚ÇÅ ‚â§‚Ñï x‚ÇÉ
concat-leq-id x‚ÇÅ x‚ÇÇ x‚ÇÉ p (refl _) = p 

concat-id-leq : (x‚ÇÅ x‚ÇÇ x‚ÇÉ : ‚Ñï) ‚Üí x‚ÇÅ == x‚ÇÇ ‚Üí x‚ÇÇ ‚â§‚Ñï x‚ÇÉ ‚Üí x‚ÇÅ ‚â§‚Ñï x‚ÇÉ
concat-id-leq x‚ÇÅ x‚ÇÇ x‚ÇÉ (refl _) q = q

_<‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùì§‚ÇÄ Ãá 
m      <‚Ñï 0      = ùüò
0      <‚Ñï succ n = ùüô
succ m <‚Ñï succ n = m <‚Ñï n 

antireflexive-<‚Ñï : (n : ‚Ñï) ‚Üí ¬¨ (n <‚Ñï n)
antireflexive-<‚Ñï 0        p = p
antireflexive-<‚Ñï (succ n) p = antireflexive-<‚Ñï n p

antisymmetric-<‚Ñï : (m n : ‚Ñï) ‚Üí m <‚Ñï n ‚Üí n <‚Ñï m ‚Üí n == m 
antisymmetric-<‚Ñï (succ m) (succ n) p q = ap succ (antisymmetric-<‚Ñï m n p q)

transitive-<‚Ñï : (m n k : ‚Ñï) ‚Üí m <‚Ñï n ‚Üí n <‚Ñï k ‚Üí m <‚Ñï k 
transitive-<‚Ñï 0        (succ n) (succ k) p q = ‚ãÜ
transitive-<‚Ñï (succ m) (succ n) (succ k) p q = transitive-<‚Ñï m n k p q

decidable-<‚Ñï : (m n : ‚Ñï) ‚Üí decidable (m <‚Ñï n)
decidable-<‚Ñï 0        0        = inr (Œª x ‚Üí x)
decidable-<‚Ñï 0        (succ n) = inl ‚ãÜ
decidable-<‚Ñï (succ m) 0        = inr (Œª x ‚Üí x)
decidable-<‚Ñï (succ m) (succ n) = decidable-<‚Ñï m n

succ-law-<‚Ñï : (n : ‚Ñï) ‚Üí n <‚Ñï succ n 
succ-law-<‚Ñï zero = ‚ãÜ
succ-law-<‚Ñï (succ n) = succ-law-<‚Ñï n

unit-law-<‚Ñï : (n : ‚Ñï) ‚Üí n <‚Ñï (n +‚Ñï 1)
unit-law-<‚Ñï 0        = ‚ãÜ
unit-law-<‚Ñï (succ n) = unit-law-<‚Ñï n

right-unit-law-<‚Ñï : (m n : ‚Ñï) ‚Üí m <‚Ñï n ‚Üí m <‚Ñï (n +‚Ñï 1)
right-unit-law-<‚Ñï 0        (succ n) p = ‚ãÜ
right-unit-law-<‚Ñï (succ m) (succ n) p = right-unit-law-<‚Ñï m n p 

neq-<‚Ñï : (m n : ‚Ñï) ‚Üí m <‚Ñï n ‚Üí ¬¨ (m == n)
neq-<‚Ñï zero (succ n) p = Œª ()
neq-<‚Ñï (succ m) (succ n) p q = neq-<‚Ñï m n p (injective-succ-‚Ñï m n q)

dist‚Ñï : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
dist‚Ñï 0        n        = n
dist‚Ñï (succ m) 0        = (succ m)
dist‚Ñï (succ m) (succ n) = dist‚Ñï m n

id-zero-dist‚Ñï : (m n : ‚Ñï) ‚Üí m == n ‚Üí dist‚Ñï m n == 0
id-zero-dist‚Ñï 0        0        p = refl 0
id-zero-dist‚Ñï (succ m) (succ n) p = id-zero-dist‚Ñï m n (injective-succ-‚Ñï m n p)

zero-id-dist‚Ñï : (m n : ‚Ñï) ‚Üí dist‚Ñï m n == 0 ‚Üí m == n
zero-id-dist‚Ñï 0        0        p = refl 0
zero-id-dist‚Ñï (succ m) (succ n) p = ap succ (zero-id-dist‚Ñï m n p)

symmetric-dist‚Ñï : (m n : ‚Ñï) ‚Üí dist‚Ñï m n == dist‚Ñï n m
symmetric-dist‚Ñï 0        0        = refl 0
symmetric-dist‚Ñï 0        (succ n) = refl (succ n) 
symmetric-dist‚Ñï (succ m) 0        = refl (succ m) 
symmetric-dist‚Ñï (succ m) (succ n) = symmetric-dist‚Ñï m n

left-zero-law-dist‚Ñï : (n : ‚Ñï) ‚Üí dist‚Ñï 0 n == n 
left-zero-law-dist‚Ñï n = refl n

right-zero-law-dist‚Ñï : (n : ‚Ñï) ‚Üí dist‚Ñï n 0 == n 
right-zero-law-dist‚Ñï 0        = refl 0
right-zero-law-dist‚Ñï (succ n) = refl (succ n)

dist-leq-+‚Ñï : (m n : ‚Ñï) ‚Üí dist‚Ñï m n ‚â§‚Ñï (m +‚Ñï n)
dist-leq-+‚Ñï 0        0        = ‚ãÜ
dist-leq-+‚Ñï 0        (succ n) = dist-leq-+‚Ñï 0 n
dist-leq-+‚Ñï (succ m) 0        = right-zero-law-‚â§‚Ñï m
dist-leq-+‚Ñï (succ m) (succ n) = right-succ-law-‚â§‚Ñï (dist‚Ñï m n) (m +‚Ñï succ n) 
                                    (transitive-‚â§‚Ñï (dist‚Ñï m n)     (m +‚Ñï n)        (m +‚Ñï succ n) (dist-leq-+‚Ñï m n)
                                    (transitive-‚â§‚Ñï (m +‚Ñï n)        (succ (m +‚Ñï n)) (m +‚Ñï succ n) (succ-law-‚â§‚Ñï (m +‚Ñï n))
                                    (concat-leq-id (succ (m +‚Ñï n)) (succ (m +‚Ñï n)) (m +‚Ñï succ n) (reflexive-‚â§‚Ñï (m +‚Ñï n)) (right-succ-law-+‚Ñï m n ‚Åª¬π))))

triangle-inequality : (m n k : ‚Ñï) ‚Üí dist‚Ñï m n ‚â§‚Ñï (dist‚Ñï m k +‚Ñï dist‚Ñï k n) 
triangle-inequality 0        0        k        = ‚ãÜ
triangle-inequality 0        (succ n) 0        = triangle-inequality zero n zero
triangle-inequality 0        (succ n) (succ k) = triangle-inequality zero n k 
triangle-inequality (succ m) 0        0        = right-zero-law-‚â§‚Ñï m
triangle-inequality (succ m) 0        (succ k) = concat-leq-id (succ m) (succ (dist‚Ñï m k +‚Ñï k)) (dist‚Ñï m k +‚Ñï succ k) 
                                                    (preserve-order-succ-‚Ñï m (dist‚Ñï m k +‚Ñï k) 
                                                        (concat-id-leq-id m (dist‚Ñï m 0) (dist‚Ñï m k +‚Ñï dist‚Ñï k 0) (dist‚Ñï m k +‚Ñï k) 
                                                            (right-zero-law-dist‚Ñï m ‚Åª¬π) 
                                                            (triangle-inequality m 0 k) 
                                                            (ap (Œª x ‚Üí dist‚Ñï m k +‚Ñï x) (right-zero-law-dist‚Ñï k)))) 
                                                    (right-succ-law-+‚Ñï (dist‚Ñï m k) k ‚Åª¬π)
triangle-inequality (succ m) (succ n) 0        = right-succ-law-‚â§‚Ñï (dist‚Ñï m n) (m +‚Ñï succ n) 
                                                    (concat-leq-id (dist‚Ñï m n) (succ (m +‚Ñï n)) (m +‚Ñï succ n) 
                                                        (right-succ-law-‚â§‚Ñï (dist‚Ñï m n) (m +‚Ñï n) (dist-leq-+‚Ñï m n)) 
                                                        (right-succ-law-+‚Ñï m n ‚Åª¬π))
triangle-inequality (succ m) (succ n) (succ k) = triangle-inequality m n k

Fin : ‚Ñï ‚Üí ùì§‚ÇÄ Ãá
Fin 0         = ùüò
Fin (succ k) = Fin k + ùüô

inclusion-Fin : (k : ‚Ñï) ‚Üí Fin k ‚Üí Fin (succ k) 
inclusion-Fin k = inl

Fin-nat : {k : ‚Ñï} ‚Üí Fin k ‚Üí ‚Ñï
Fin-nat {succ k} (inl x) = Fin-nat x
Fin-nat {succ k} (inr x) = k

upper-bound-Fin-nat : {k : ‚Ñï} ‚Üí (x : Fin k) ‚Üí Fin-nat x <‚Ñï k 
upper-bound-Fin-nat {succ k} (inl x) = transitive-<‚Ñï (Fin-nat x) k (succ k) (upper-bound-Fin-nat x) (succ-law-<‚Ñï k)
upper-bound-Fin-nat {succ k} (inr x) = succ-law-<‚Ñï k

injective-Fin-nat : {k : ‚Ñï} ‚Üí {x y : Fin k} ‚Üí Fin-nat x == Fin-nat y ‚Üí x == y 
injective-Fin-nat {succ k} {inl x} {inl y} p = ap inl (injective-Fin-nat p)
injective-Fin-nat {succ k} {inl x} {inr ‚ãÜ} p = ùüò-recursion (inl x == inr ‚ãÜ) (neq-<‚Ñï (Fin-nat x) k (upper-bound-Fin-nat x) p)  
injective-Fin-nat {succ k} {inr ‚ãÜ} {inl y} p = ùüò-recursion (inr ‚ãÜ == inl y) (neq-<‚Ñï (Fin-nat y) k (upper-bound-Fin-nat y) (p ‚Åª¬π)) 
injective-Fin-nat {succ k} {inr ‚ãÜ} {inr ‚ãÜ} p = refl (inr ‚ãÜ)    

zero-Fin : {k : ‚Ñï} ‚Üí Fin (succ k) 
zero-Fin {0}      = inr ‚ãÜ 
zero-Fin {succ k} = inl zero-Fin

skip-zero-Fin : {k : ‚Ñï} ‚Üí Fin k ‚Üí Fin (succ k)
skip-zero-Fin {succ k} (inl x) = inl (skip-zero-Fin x) 
skip-zero-Fin {succ k} (inr ‚ãÜ) = inr ‚ãÜ

succ-Fin : {k : ‚Ñï} ‚Üí Fin k ‚Üí Fin k 
succ-Fin {succ k} (inl x) = skip-zero-Fin x 
succ-Fin {succ k} (inr ‚ãÜ) = zero-Fin  

Fin-nat-zero : {k : ‚Ñï} ‚Üí Fin-nat (zero-Fin {k}) == 0 
Fin-nat-zero {0}      = refl zero
Fin-nat-zero {succ k} = Fin-nat-zero {k}

Fin-nat-skip-zero : {k : ‚Ñï} ‚Üí (x : Fin k) ‚Üí Fin-nat (skip-zero-Fin x) == Fin-nat x +‚Ñï 1
Fin-nat-skip-zero {succ k} (inl x) = Fin-nat-skip-zero x
Fin-nat-skip-zero {succ k} (inr ‚ãÜ) = right-unit-law-+‚Ñï k ‚Åª¬π

Eq-Fin : {k : ‚Ñï} ‚Üí Fin k ‚Üí Fin k ‚Üí ùì§‚ÇÄ Ãá 
Eq-Fin {succ k} (inl x) (inl y) = Eq-Fin x y
Eq-Fin {succ k} (inl x) (inr ‚ãÜ) = ùüò
Eq-Fin {succ k} (inr ‚ãÜ) (inl y) = ùüò
Eq-Fin {succ k} (inr ‚ãÜ) (inr ‚ãÜ) = ùüô

relf-Eq-Fin : {k : ‚Ñï} ‚Üí (x : Fin k) ‚Üí Eq-Fin x x 
relf-Eq-Fin {succ k} (inl x) = relf-Eq-Fin x
relf-Eq-Fin {succ k} (inr ‚ãÜ) = ‚ãÜ

id-Eq-Fin : {k : ‚Ñï} ‚Üí {x y : Fin k} ‚Üí x == y ‚Üí Eq-Fin x y 
id-Eq-Fin {k} (refl _) = relf-Eq-Fin {k} _

Eq-id-Fin : {k : ‚Ñï} ‚Üí {x y : Fin k} ‚Üí Eq-Fin x y ‚Üí x == y 
Eq-id-Fin {succ k} {inl x} {inl y} p = ap inl (Eq-id-Fin p)
Eq-id-Fin {succ k} {inl x} {inr ‚ãÜ} ()
Eq-id-Fin {succ k} {inr ‚ãÜ} {inr ‚ãÜ} ‚ãÜ = refl (inr ‚ãÜ) 

decidable-Eq-Fin : {k : ‚Ñï} (x y : Fin k) ‚Üí decidable (Eq-Fin x y)
decidable-Eq-Fin {succ k} (inl x) (inl y) = decidable-Eq-Fin x y
decidable-Eq-Fin {succ k} (inl x) (inr ‚ãÜ) = decidable-ùüò
decidable-Eq-Fin {succ k} (inr ‚ãÜ) (inl y) = decidable-ùüò
decidable-Eq-Fin {succ k} (inr ‚ãÜ) (inr ‚ãÜ) = decidable-ùüô 

injective-inclusion-Fin : {k : ‚Ñï} ‚Üí {x y : Fin k} ‚Üí inclusion-Fin k x == inclusion-Fin k y ‚Üí x == y 
injective-inclusion-Fin p = Eq-id-Fin (id-Eq-Fin p)

zero-neq-succ-Fin : {k : ‚Ñï} ‚Üí {x : Fin k} ‚Üí ¬¨ (succ-Fin (inclusion-Fin k x) == zero-Fin)
zero-neq-succ-Fin {succ k} {inl x} p = zero-neq-succ-Fin (injective-inclusion-Fin p) 
zero-neq-succ-Fin {succ k} {inr ‚ãÜ} p = id-Eq-Fin p

injective-skip-zero-Fin : {k : ‚Ñï} ‚Üí {x y : Fin k} ‚Üí skip-zero-Fin x == skip-zero-Fin y ‚Üí x == y
injective-skip-zero-Fin {succ k} {inl x} {inl y} p = ap inl (injective-skip-zero-Fin (injective-inclusion-Fin p))
injective-skip-zero-Fin {succ k} {inl x} {inr ‚ãÜ} p = ùüò-recursion (inl x == inr ‚ãÜ) (id-Eq-Fin p)
injective-skip-zero-Fin {succ k} {inr ‚ãÜ} {inl y} p = ùüò-recursion (inr ‚ãÜ == inl y) (id-Eq-Fin p)
injective-skip-zero-Fin {succ k} {inr ‚ãÜ} {inr ‚ãÜ} p = refl (inr ‚ãÜ)

injective-succ-Fin : {k : ‚Ñï} ‚Üí {x y : Fin k} ‚Üí succ-Fin x == succ-Fin y ‚Üí x == y
injective-succ-Fin {succ k} {inl x} {inl y} p = ap inl (injective-skip-zero-Fin p)
injective-succ-Fin {succ k} {inl x} {inr ‚ãÜ} p = ùüò-recursion (inl x == inr ‚ãÜ) (zero-neq-succ-Fin p)
injective-succ-Fin {succ k} {inr ‚ãÜ} {inl y} p = ùüò-recursion (inr ‚ãÜ == inl y) (zero-neq-succ-Fin (p ‚Åª¬π))
injective-succ-Fin {succ k} {inr ‚ãÜ} {inr ‚ãÜ} p = refl (inr ‚ãÜ)

neg-one-Fin : {k : ‚Ñï} ‚Üí Fin (succ k)
neg-one-Fin {k} = inr ‚ãÜ

neg-two-Fin : {k : ‚Ñï} ‚Üí Fin (succ k)
neg-two-Fin {0}      = inr ‚ãÜ 
neg-two-Fin {succ k} = inl (inr ‚ãÜ)

skip-neg-two-Fin : {k : ‚Ñï} ‚Üí Fin k ‚Üí Fin (succ k)
skip-neg-two-Fin {succ k} (inl x) = inl (inl x)
skip-neg-two-Fin {succ k} (inr ‚ãÜ) = inr ‚ãÜ

pred-Fin : {k : ‚Ñï} ‚Üí Fin k ‚Üí Fin k 
pred-Fin {succ k} (inl x) = skip-neg-two-Fin (pred-Fin x)
pred-Fin {succ k} (inr x) = neg-two-Fin

pred-zero-Fin : {k : ‚Ñï} ‚Üí pred-Fin {succ k} zero-Fin == neg-one-Fin
pred-zero-Fin {0}      = refl (inr ‚ãÜ)
pred-zero-Fin {succ k} = ap skip-neg-two-Fin pred-zero-Fin

succ-skip-neg-two-Fin : {k : ‚Ñï} ‚Üí (x : Fin k) ‚Üí succ-Fin (skip-neg-two-Fin x) == inl (succ-Fin  x)
succ-skip-neg-two-Fin {succ k} (inl x) = refl (inl (skip-zero-Fin x))
succ-skip-neg-two-Fin {succ k} (inr ‚ãÜ) = refl (inl zero-Fin)

succ-pred-id-Fin : {k : ‚Ñï} ‚Üí (x : Fin k) ‚Üí succ-Fin (pred-Fin x) == x
succ-pred-id-Fin {succ 0}        (inr ‚ãÜ) = refl (inr ‚ãÜ)
succ-pred-id-Fin {succ (succ k)} (inl x) = (succ-Fin (skip-neg-two-Fin (pred-Fin x)))   ==‚ü® succ-skip-neg-two-Fin (pred-Fin x) ‚ü©
                                           (inl (succ-Fin (pred-Fin x))                 ==‚ü® ap inl (succ-pred-id-Fin x) ‚ü©
                                           (inl x                                       ‚àé))
succ-pred-id-Fin {succ (succ k)} (inr ‚ãÜ) = refl (inr ‚ãÜ)

pred-succ-id-Fin : {k : ‚Ñï} ‚Üí (x : Fin k) ‚Üí pred-Fin (succ-Fin x) == x 
pred-succ-id-Fin {succ 0}        (inr ‚ãÜ)       = refl (inr ‚ãÜ)
pred-succ-id-Fin {succ (succ k)} (inl (inl x)) = ap skip-neg-two-Fin (pred-succ-id-Fin (inl x))
pred-succ-id-Fin {succ (succ k)} (inl (inr ‚ãÜ)) = refl (inl (inr ‚ãÜ)) 
pred-succ-id-Fin {succ (succ k)} (inr ‚ãÜ)       = pred-zero-Fin
